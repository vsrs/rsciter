/* automatically generated by rust-bindgen 0.70.1 */

use super::*;

pub const SCITER_VERSION_0: u32 = 5;
pub const SCITER_VERSION_1: u32 = 0;
pub const SCITER_VERSION_2: u32 = 3;
pub const SCITER_VERSION_3: u32 = 15;
pub const SCDOM_OK: u32 = 0;
pub const SCDOM_INVALID_HWND: u32 = 1;
pub const SCDOM_INVALID_HANDLE: u32 = 2;
pub const SCDOM_PASSIVE_HANDLE: u32 = 3;
pub const SCDOM_INVALID_PARAMETER: u32 = 4;
pub const SCDOM_OPERATION_FAILED: u32 = 5;
pub const SCDOM_OK_NOT_HANDLED: i32 = -1;
pub const SC_LOAD_DATA: u32 = 1;
pub const SC_DATA_LOADED: u32 = 2;
pub const SC_ATTACH_BEHAVIOR: u32 = 4;
pub const SC_ENGINE_DESTROYED: u32 = 5;
pub const SC_POSTED_NOTIFICATION: u32 = 6;
pub const SC_GRAPHICS_CRITICAL_FAILURE: u32 = 7;
pub const SC_KEYBOARD_REQUEST: u32 = 8;
pub const SC_INVALIDATE_RECT: u32 = 9;
pub const SC_SET_CURSOR: u32 = 10;
pub const SCITER_API_VERSION: u32 = 9;
pub type wchar_t = ::std::os::raw::c_ushort;
pub type SBOOL = ::std::os::raw::c_int;
pub type DWORD = ::std::os::raw::c_ulong;
pub type BYTE = ::std::os::raw::c_uchar;
pub type LPVOID = *mut ::std::os::raw::c_void;
pub type INT = ::std::os::raw::c_int;
pub type UINT = ::std::os::raw::c_uint;
pub type INT64 = ::std::os::raw::c_longlong;
pub type UINT64 = ::std::os::raw::c_ulonglong;
pub type CHAR = ::std::os::raw::c_char;
pub type LONG = ::std::os::raw::c_long;
pub type WCHAR = wchar_t;
pub type LPWSTR = *mut WCHAR;
pub type LPCWSTR = *const WCHAR;
pub type LPCSTR = *const CHAR;
pub type LPUINT = *mut UINT;
pub type wchar = wchar_t;
pub type LPCBYTE = *const BYTE;
impl GFX_LAYER {
    pub const GFX_LAYER_CG: GFX_LAYER = GFX_LAYER::GFX_LAYER_GDI;
}
impl GFX_LAYER {
    pub const GFX_LAYER_CAIRO: GFX_LAYER = GFX_LAYER::GFX_LAYER_GDI;
}
impl GFX_LAYER {
    pub const GFX_LAYER_D2D_WARP: GFX_LAYER = GFX_LAYER::GFX_LAYER_WARP;
}
impl GFX_LAYER {
    pub const GFX_LAYER_SKIA_RASTER: GFX_LAYER = GFX_LAYER::GFX_LAYER_SKIA;
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum GFX_LAYER {
    GFX_LAYER_GDI = 1,
    GFX_LAYER_WARP = 2,
    GFX_LAYER_D2D = 3,
    GFX_LAYER_SKIA = 4,
    GFX_LAYER_SKIA_OPENGL = 5,
    GFX_LAYER_SKIA_VULKAN = 6,
    GFX_LAYER_SKIA_DX12 = 8,
    GFX_LAYER_SKIA_GPU = 9,
    GFX_LAYER_AUTO = 65535,
}
pub type HREQUEST = *mut ::std::os::raw::c_void;
#[repr(i32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum REQUEST_RESULT {
    REQUEST_PANIC = -1,
    REQUEST_OK = 0,
    REQUEST_BAD_PARAM = 1,
    REQUEST_FAILURE = 2,
    REQUEST_NOTSUPPORTED = 3,
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum SciterResourceType {
    RT_DATA_HTML = 0,
    RT_DATA_IMAGE = 1,
    RT_DATA_STYLE = 2,
    RT_DATA_CURSOR = 3,
    RT_DATA_SCRIPT = 4,
    RT_DATA_RAW = 5,
    RT_DATA_FONT = 6,
    RT_DATA_SOUND = 7,
    RT_DATA_FORCE_DWORD = -1,
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum REQUEST_STATE {
    RS_PENDING = 0,
    RS_SUCCESS = 1,
    RS_FAILURE = 2,
    RS_FORCE_DWORD = -1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SciterRequestAPI {
    pub RequestUse: ::std::option::Option<unsafe extern "C" fn(rq: HREQUEST) -> REQUEST_RESULT>,
    pub RequestUnUse: ::std::option::Option<unsafe extern "C" fn(rq: HREQUEST) -> REQUEST_RESULT>,
    pub RequestUrl: ::std::option::Option<
        unsafe extern "C" fn(
            rq: HREQUEST,
            rcv: ::std::option::Option<unsafe extern "C" fn(arg1: LPCSTR, arg2: UINT, arg3: LPVOID)>,
            rcv_param: LPVOID,
        ) -> REQUEST_RESULT,
    >,
    pub RequestContentUrl: ::std::option::Option<
        unsafe extern "C" fn(
            rq: HREQUEST,
            rcv: ::std::option::Option<unsafe extern "C" fn(arg1: LPCSTR, arg2: UINT, arg3: LPVOID)>,
            rcv_param: LPVOID,
        ) -> REQUEST_RESULT,
    >,
    pub RequestGetRequestType: ::std::option::Option<
        unsafe extern "C" fn(rq: HREQUEST, pType: *mut LPCSTR) -> REQUEST_RESULT,
    >,
    pub RequestGetRequestedDataType: ::std::option::Option<
        unsafe extern "C" fn(rq: HREQUEST, pData: *mut SciterResourceType) -> REQUEST_RESULT,
    >,
    pub RequestGetReceivedDataType: ::std::option::Option<
        unsafe extern "C" fn(
            rq: HREQUEST,
            rcv: ::std::option::Option<unsafe extern "C" fn(arg1: LPCSTR, arg2: UINT, arg3: LPVOID)>,
            rcv_param: LPVOID,
        ) -> REQUEST_RESULT,
    >,
    pub RequestGetNumberOfParameters: ::std::option::Option<
        unsafe extern "C" fn(rq: HREQUEST, pNumber: *mut UINT) -> REQUEST_RESULT,
    >,
    pub RequestGetNthParameterName: ::std::option::Option<
        unsafe extern "C" fn(
            rq: HREQUEST,
            n: UINT,
            rcv: ::std::option::Option<
                unsafe extern "C" fn(arg1: LPCWSTR, arg2: UINT, arg3: LPVOID),
            >,
            rcv_param: LPVOID,
        ) -> REQUEST_RESULT,
    >,
    pub RequestGetNthParameterValue: ::std::option::Option<
        unsafe extern "C" fn(
            rq: HREQUEST,
            n: UINT,
            rcv: ::std::option::Option<
                unsafe extern "C" fn(arg1: LPCWSTR, arg2: UINT, arg3: LPVOID),
            >,
            rcv_param: LPVOID,
        ) -> REQUEST_RESULT,
    >,
    pub RequestGetTimes: ::std::option::Option<
        unsafe extern "C" fn(
            rq: HREQUEST,
            pStarted: *mut UINT,
            pEnded: *mut UINT,
        ) -> REQUEST_RESULT,
    >,
    pub RequestGetNumberOfRqHeaders: ::std::option::Option<
        unsafe extern "C" fn(rq: HREQUEST, pNumber: *mut UINT) -> REQUEST_RESULT,
    >,
    pub RequestGetNthRqHeaderName: ::std::option::Option<
        unsafe extern "C" fn(
            rq: HREQUEST,
            n: UINT,
            rcv: ::std::option::Option<
                unsafe extern "C" fn(arg1: LPCWSTR, arg2: UINT, arg3: LPVOID),
            >,
            rcv_param: LPVOID,
        ) -> REQUEST_RESULT,
    >,
    pub RequestGetNthRqHeaderValue: ::std::option::Option<
        unsafe extern "C" fn(
            rq: HREQUEST,
            n: UINT,
            rcv: ::std::option::Option<
                unsafe extern "C" fn(arg1: LPCWSTR, arg2: UINT, arg3: LPVOID),
            >,
            rcv_param: LPVOID,
        ) -> REQUEST_RESULT,
    >,
    pub RequestGetNumberOfRspHeaders: ::std::option::Option<
        unsafe extern "C" fn(rq: HREQUEST, pNumber: *mut UINT) -> REQUEST_RESULT,
    >,
    pub RequestGetNthRspHeaderName: ::std::option::Option<
        unsafe extern "C" fn(
            rq: HREQUEST,
            n: UINT,
            rcv: ::std::option::Option<
                unsafe extern "C" fn(arg1: LPCWSTR, arg2: UINT, arg3: LPVOID),
            >,
            rcv_param: LPVOID,
        ) -> REQUEST_RESULT,
    >,
    pub RequestGetNthRspHeaderValue: ::std::option::Option<
        unsafe extern "C" fn(
            rq: HREQUEST,
            n: UINT,
            rcv: ::std::option::Option<
                unsafe extern "C" fn(arg1: LPCWSTR, arg2: UINT, arg3: LPVOID),
            >,
            rcv_param: LPVOID,
        ) -> REQUEST_RESULT,
    >,
    pub RequestGetCompletionStatus: ::std::option::Option<
        unsafe extern "C" fn(
            rq: HREQUEST,
            pState: *mut REQUEST_STATE,
            pCompletionStatus: *mut UINT,
        ) -> REQUEST_RESULT,
    >,
    pub RequestGetProxyHost: ::std::option::Option<
        unsafe extern "C" fn(
            rq: HREQUEST,
            rcv: ::std::option::Option<unsafe extern "C" fn(arg1: LPCSTR, arg2: UINT, arg3: LPVOID)>,
            rcv_param: LPVOID,
        ) -> REQUEST_RESULT,
    >,
    pub RequestGetProxyPort: ::std::option::Option<
        unsafe extern "C" fn(rq: HREQUEST, pPort: *mut UINT) -> REQUEST_RESULT,
    >,
    pub RequestSetSucceeded: ::std::option::Option<
        unsafe extern "C" fn(
            rq: HREQUEST,
            status: UINT,
            dataOrNull: LPCBYTE,
            dataLength: UINT,
        ) -> REQUEST_RESULT,
    >,
    pub RequestSetFailed: ::std::option::Option<
        unsafe extern "C" fn(
            rq: HREQUEST,
            status: UINT,
            dataOrNull: LPCBYTE,
            dataLength: UINT,
        ) -> REQUEST_RESULT,
    >,
    pub RequestAppendDataChunk: ::std::option::Option<
        unsafe extern "C" fn(rq: HREQUEST, data: LPCBYTE, dataLength: UINT) -> REQUEST_RESULT,
    >,
    pub RequestSetRqHeader: ::std::option::Option<
        unsafe extern "C" fn(rq: HREQUEST, name: LPCWSTR, value: LPCWSTR) -> REQUEST_RESULT,
    >,
    pub RequestSetRspHeader: ::std::option::Option<
        unsafe extern "C" fn(rq: HREQUEST, name: LPCWSTR, value: LPCWSTR) -> REQUEST_RESULT,
    >,
    pub RequestSetReceivedDataType:
        ::std::option::Option<unsafe extern "C" fn(rq: HREQUEST, type_: LPCSTR) -> REQUEST_RESULT>,
    pub RequestSetReceivedDataEncoding: ::std::option::Option<
        unsafe extern "C" fn(rq: HREQUEST, encoding: LPCSTR) -> REQUEST_RESULT,
    >,
    pub RequestGetData: ::std::option::Option<
        unsafe extern "C" fn(
            rq: HREQUEST,
            rcv: ::std::option::Option<
                unsafe extern "C" fn(arg1: LPCBYTE, arg2: UINT, arg3: LPVOID),
            >,
            rcv_param: LPVOID,
        ) -> REQUEST_RESULT,
    >,
}
pub type LPSciterRequestAPI = *mut SciterRequestAPI;
impl VALUE_RESULT {
    pub const HV_OK_TRUE: VALUE_RESULT = VALUE_RESULT(-1);
}
impl VALUE_RESULT {
    pub const HV_OK: VALUE_RESULT = VALUE_RESULT(0);
}
impl VALUE_RESULT {
    pub const HV_BAD_PARAMETER: VALUE_RESULT = VALUE_RESULT(1);
}
impl VALUE_RESULT {
    pub const HV_INCOMPATIBLE_TYPE: VALUE_RESULT = VALUE_RESULT(2);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct VALUE_RESULT(pub ::std::os::raw::c_int);
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VALUE {
    pub t: UINT,
    pub u: UINT,
    pub d: UINT64,
}
impl VALUE_TYPE {
    pub const T_UNDEFINED: VALUE_TYPE = VALUE_TYPE(0);
}
impl VALUE_TYPE {
    pub const T_NULL: VALUE_TYPE = VALUE_TYPE(1);
}
impl VALUE_TYPE {
    pub const T_BOOL: VALUE_TYPE = VALUE_TYPE(2);
}
impl VALUE_TYPE {
    pub const T_INT: VALUE_TYPE = VALUE_TYPE(3);
}
impl VALUE_TYPE {
    pub const T_FLOAT: VALUE_TYPE = VALUE_TYPE(4);
}
impl VALUE_TYPE {
    pub const T_STRING: VALUE_TYPE = VALUE_TYPE(5);
}
impl VALUE_TYPE {
    pub const T_DATE: VALUE_TYPE = VALUE_TYPE(6);
}
impl VALUE_TYPE {
    pub const T_BIG_INT: VALUE_TYPE = VALUE_TYPE(7);
}
impl VALUE_TYPE {
    pub const T_LENGTH: VALUE_TYPE = VALUE_TYPE(8);
}
impl VALUE_TYPE {
    pub const T_ARRAY: VALUE_TYPE = VALUE_TYPE(9);
}
impl VALUE_TYPE {
    pub const T_MAP: VALUE_TYPE = VALUE_TYPE(10);
}
impl VALUE_TYPE {
    pub const T_FUNCTION: VALUE_TYPE = VALUE_TYPE(11);
}
impl VALUE_TYPE {
    pub const T_BYTES: VALUE_TYPE = VALUE_TYPE(12);
}
impl VALUE_TYPE {
    pub const T_OBJECT: VALUE_TYPE = VALUE_TYPE(13);
}
impl VALUE_TYPE {
    pub const T_RESOURCE: VALUE_TYPE = VALUE_TYPE(15);
}
impl VALUE_TYPE {
    pub const T_DURATION: VALUE_TYPE = VALUE_TYPE(17);
}
impl VALUE_TYPE {
    pub const T_ANGLE: VALUE_TYPE = VALUE_TYPE(18);
}
impl VALUE_TYPE {
    pub const T_COLOR: VALUE_TYPE = VALUE_TYPE(19);
}
impl VALUE_TYPE {
    pub const T_ASSET: VALUE_TYPE = VALUE_TYPE(21);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct VALUE_TYPE(pub ::std::os::raw::c_int);
impl VALUE_UNIT_TYPE {
    pub const UT_EM: VALUE_UNIT_TYPE = VALUE_UNIT_TYPE(1);
}
impl VALUE_UNIT_TYPE {
    pub const UT_EX: VALUE_UNIT_TYPE = VALUE_UNIT_TYPE(2);
}
impl VALUE_UNIT_TYPE {
    pub const UT_PR: VALUE_UNIT_TYPE = VALUE_UNIT_TYPE(3);
}
impl VALUE_UNIT_TYPE {
    pub const UT_SP: VALUE_UNIT_TYPE = VALUE_UNIT_TYPE(4);
}
impl VALUE_UNIT_TYPE {
    pub const reserved1: VALUE_UNIT_TYPE = VALUE_UNIT_TYPE(5);
}
impl VALUE_UNIT_TYPE {
    pub const reserved2: VALUE_UNIT_TYPE = VALUE_UNIT_TYPE(6);
}
impl VALUE_UNIT_TYPE {
    pub const UT_PX: VALUE_UNIT_TYPE = VALUE_UNIT_TYPE(7);
}
impl VALUE_UNIT_TYPE {
    pub const UT_IN: VALUE_UNIT_TYPE = VALUE_UNIT_TYPE(8);
}
impl VALUE_UNIT_TYPE {
    pub const UT_CM: VALUE_UNIT_TYPE = VALUE_UNIT_TYPE(9);
}
impl VALUE_UNIT_TYPE {
    pub const UT_MM: VALUE_UNIT_TYPE = VALUE_UNIT_TYPE(10);
}
impl VALUE_UNIT_TYPE {
    pub const UT_PT: VALUE_UNIT_TYPE = VALUE_UNIT_TYPE(11);
}
impl VALUE_UNIT_TYPE {
    pub const UT_PC: VALUE_UNIT_TYPE = VALUE_UNIT_TYPE(12);
}
impl VALUE_UNIT_TYPE {
    pub const UT_DIP: VALUE_UNIT_TYPE = VALUE_UNIT_TYPE(13);
}
impl VALUE_UNIT_TYPE {
    pub const reserved3: VALUE_UNIT_TYPE = VALUE_UNIT_TYPE(14);
}
impl VALUE_UNIT_TYPE {
    pub const reserved4: VALUE_UNIT_TYPE = VALUE_UNIT_TYPE(15);
}
impl VALUE_UNIT_TYPE {
    pub const UT_PR_WIDTH: VALUE_UNIT_TYPE = VALUE_UNIT_TYPE(16);
}
impl VALUE_UNIT_TYPE {
    pub const UT_PR_HEIGHT: VALUE_UNIT_TYPE = VALUE_UNIT_TYPE(17);
}
impl VALUE_UNIT_TYPE {
    pub const UT_PR_VIEW_WIDTH: VALUE_UNIT_TYPE = VALUE_UNIT_TYPE(18);
}
impl VALUE_UNIT_TYPE {
    pub const UT_PR_VIEW_HEIGHT: VALUE_UNIT_TYPE = VALUE_UNIT_TYPE(19);
}
impl VALUE_UNIT_TYPE {
    pub const UT_PR_VIEW_MIN: VALUE_UNIT_TYPE = VALUE_UNIT_TYPE(20);
}
impl VALUE_UNIT_TYPE {
    pub const UT_PR_VIEW_MAX: VALUE_UNIT_TYPE = VALUE_UNIT_TYPE(21);
}
impl VALUE_UNIT_TYPE {
    pub const UT_REM: VALUE_UNIT_TYPE = VALUE_UNIT_TYPE(22);
}
impl VALUE_UNIT_TYPE {
    pub const UT_PPX: VALUE_UNIT_TYPE = VALUE_UNIT_TYPE(23);
}
impl VALUE_UNIT_TYPE {
    pub const UT_CH: VALUE_UNIT_TYPE = VALUE_UNIT_TYPE(24);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct VALUE_UNIT_TYPE(pub ::std::os::raw::c_int);
impl VALUE_UNIT_TYPE_DATE {
    pub const DT_HAS_DATE: VALUE_UNIT_TYPE_DATE = VALUE_UNIT_TYPE_DATE(1);
}
impl VALUE_UNIT_TYPE_DATE {
    pub const DT_HAS_TIME: VALUE_UNIT_TYPE_DATE = VALUE_UNIT_TYPE_DATE(2);
}
impl VALUE_UNIT_TYPE_DATE {
    pub const DT_HAS_SECONDS: VALUE_UNIT_TYPE_DATE = VALUE_UNIT_TYPE_DATE(4);
}
impl VALUE_UNIT_TYPE_DATE {
    pub const DT_UTC: VALUE_UNIT_TYPE_DATE = VALUE_UNIT_TYPE_DATE(16);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct VALUE_UNIT_TYPE_DATE(pub ::std::os::raw::c_int);
impl VALUE_UNIT_TYPE_OBJECT {
    pub const UT_OBJECT_ARRAY: VALUE_UNIT_TYPE_OBJECT = VALUE_UNIT_TYPE_OBJECT(0);
}
impl VALUE_UNIT_TYPE_OBJECT {
    pub const UT_OBJECT_OBJECT: VALUE_UNIT_TYPE_OBJECT = VALUE_UNIT_TYPE_OBJECT(1);
}
impl VALUE_UNIT_TYPE_OBJECT {
    pub const UT_OBJECT_CLASS: VALUE_UNIT_TYPE_OBJECT = VALUE_UNIT_TYPE_OBJECT(2);
}
impl VALUE_UNIT_TYPE_OBJECT {
    pub const UT_OBJECT_NATIVE: VALUE_UNIT_TYPE_OBJECT = VALUE_UNIT_TYPE_OBJECT(3);
}
impl VALUE_UNIT_TYPE_OBJECT {
    pub const UT_OBJECT_FUNCTION: VALUE_UNIT_TYPE_OBJECT = VALUE_UNIT_TYPE_OBJECT(4);
}
impl VALUE_UNIT_TYPE_OBJECT {
    pub const UT_OBJECT_ERROR: VALUE_UNIT_TYPE_OBJECT = VALUE_UNIT_TYPE_OBJECT(5);
}
impl VALUE_UNIT_TYPE_OBJECT {
    pub const UT_OBJECT_BUFFER: VALUE_UNIT_TYPE_OBJECT = VALUE_UNIT_TYPE_OBJECT(6);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct VALUE_UNIT_TYPE_OBJECT(pub ::std::os::raw::c_int);
impl VALUE_UNIT_UNDEFINED {
    pub const UT_NOTHING: VALUE_UNIT_UNDEFINED = VALUE_UNIT_UNDEFINED(1);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct VALUE_UNIT_UNDEFINED(pub ::std::os::raw::c_int);
impl VALUE_UNIT_TYPE_STRING {
    pub const UT_STRING_STRING: VALUE_UNIT_TYPE_STRING = VALUE_UNIT_TYPE_STRING(0);
}
impl VALUE_UNIT_TYPE_STRING {
    pub const UT_STRING_ERROR: VALUE_UNIT_TYPE_STRING = VALUE_UNIT_TYPE_STRING(1);
}
impl VALUE_UNIT_TYPE_STRING {
    pub const UT_STRING_SECURE: VALUE_UNIT_TYPE_STRING = VALUE_UNIT_TYPE_STRING(2);
}
impl VALUE_UNIT_TYPE_STRING {
    pub const UT_STRING_SYMBOL: VALUE_UNIT_TYPE_STRING = VALUE_UNIT_TYPE_STRING(65535);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct VALUE_UNIT_TYPE_STRING(pub ::std::os::raw::c_int);
pub type NATIVE_FUNCTOR_INVOKE = ::std::option::Option<
    unsafe extern "C" fn(
        tag: *mut ::std::os::raw::c_void,
        argc: UINT,
        argv: *const VALUE,
        retval: *mut VALUE,
    ),
>;
pub type NATIVE_FUNCTOR_RELEASE =
    ::std::option::Option<unsafe extern "C" fn(tag: *mut ::std::os::raw::c_void)>;
impl VALUE_STRING_CVT_TYPE {
    pub const CVT_SIMPLE: VALUE_STRING_CVT_TYPE = VALUE_STRING_CVT_TYPE(0);
}
impl VALUE_STRING_CVT_TYPE {
    pub const CVT_JSON_LITERAL: VALUE_STRING_CVT_TYPE = VALUE_STRING_CVT_TYPE(1);
}
impl VALUE_STRING_CVT_TYPE {
    pub const CVT_JSON_MAP: VALUE_STRING_CVT_TYPE = VALUE_STRING_CVT_TYPE(2);
}
impl VALUE_STRING_CVT_TYPE {
    pub const CVT_XJSON_LITERAL: VALUE_STRING_CVT_TYPE = VALUE_STRING_CVT_TYPE(3);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct VALUE_STRING_CVT_TYPE(pub ::std::os::raw::c_int);
pub type SCITER_VALUE = VALUE;
pub type HELEMENT = *mut ::std::os::raw::c_void;
pub type HNODE = *mut ::std::os::raw::c_void;
pub type HRANGE = *mut ::std::os::raw::c_void;
pub type HSARCHIVE = *mut ::std::os::raw::c_void;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct hposition {
    pub hn: HNODE,
    pub pos: INT,
}
pub type HPOSITION = hposition;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct METHOD_PARAMS {
    pub methodID: UINT,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct REQUEST_PARAM {
    pub name: LPCWSTR,
    pub value: LPCWSTR,
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum ELEMENT_AREAS {
    ROOT_RELATIVE = 1,
    SELF_RELATIVE = 2,
    CONTAINER_RELATIVE = 3,
    VIEW_RELATIVE = 4,
    CONTENT_BOX = 0,
    PADDING_BOX = 16,
    BORDER_BOX = 32,
    MARGIN_BOX = 48,
    BACK_IMAGE_AREA = 64,
    FORE_IMAGE_AREA = 80,
    SCROLLABLE_AREA = 96,
}
impl SCITER_SCROLL_FLAGS {
    pub const SCROLL_TO_TOP: SCITER_SCROLL_FLAGS = SCITER_SCROLL_FLAGS(1);
}
impl SCITER_SCROLL_FLAGS {
    pub const SCROLL_SMOOTH: SCITER_SCROLL_FLAGS = SCITER_SCROLL_FLAGS(16);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct SCITER_SCROLL_FLAGS(pub ::std::os::raw::c_int);
#[repr(i32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum SET_ELEMENT_HTML {
    SIH_REPLACE_CONTENT = 0,
    SIH_INSERT_AT_START = 1,
    SIH_APPEND_AFTER_LAST = 2,
    SOH_REPLACE = 3,
    SOH_INSERT_BEFORE = 4,
    SOH_INSERT_AFTER = 5,
}
pub type LPELEMENT_EVENT_PROC = ::std::option::Option<
    unsafe extern "C" fn(arg1: LPVOID, arg2: HELEMENT, arg3: UINT, arg4: LPVOID) -> SBOOL,
>;
#[repr(i32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum ELEMENT_STATE_BITS {
    STATE_LINK = 1,
    STATE_HOVER = 2,
    STATE_ACTIVE = 4,
    STATE_FOCUS = 8,
    STATE_VISITED = 16,
    STATE_CURRENT = 32,
    STATE_CHECKED = 64,
    STATE_DISABLED = 128,
    STATE_READONLY = 256,
    STATE_EXPANDED = 512,
    STATE_COLLAPSED = 1024,
    STATE_INCOMPLETE = 2048,
    STATE_ANIMATING = 4096,
    STATE_FOCUSABLE = 8192,
    STATE_ANCHOR = 16384,
    STATE_SYNTHETIC = 32768,
    STATE_OWNS_POPUP = 65536,
    STATE_TABFOCUS = 131072,
    STATE_EMPTY = 262144,
    STATE_BUSY = 524288,
    STATE_DRAG_OVER = 1048576,
    STATE_DROP_TARGET = 2097152,
    STATE_MOVING = 4194304,
    STATE_COPYING = 8388608,
    STATE_DRAG_SOURCE = 16777216,
    STATE_DROP_MARKER = 33554432,
    STATE_PRESSED = 67108864,
    STATE_POPUP = 134217728,
    STATE_IS_LTR = 268435456,
    STATE_IS_RTL = 536870912,
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum REQUEST_TYPE {
    GET_ASYNC = 0,
    POST_ASYNC = 1,
    GET_SYNC = 2,
    POST_SYNC = 3,
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum CTL_TYPE {
    CTL_NO = 0,
    CTL_UNKNOWN = 1,
    CTL_EDIT = 2,
    CTL_NUMERIC = 3,
    CTL_CLICKABLE = 4,
    CTL_BUTTON = 5,
    CTL_CHECKBOX = 6,
    CTL_RADIO = 7,
    CTL_SELECT_SINGLE = 8,
    CTL_SELECT_MULTIPLE = 9,
    CTL_DD_SELECT = 10,
    CTL_TEXTAREA = 11,
    CTL_HTMLAREA = 12,
    CTL_PASSWORD = 13,
    CTL_PROGRESS = 14,
    CTL_SLIDER = 15,
    CTL_DECIMAL = 16,
    CTL_CURRENCY = 17,
    CTL_SCROLLBAR = 18,
    CTL_LIST = 19,
    CTL_RICHTEXT = 20,
    CTL_CALENDAR = 21,
    CTL_DATE = 22,
    CTL_TIME = 23,
    CTL_FILE = 24,
    CTL_PATH = 25,
    CTL_HYPERLINK = 26,
    CTL_FORM = 27,
    CTL_MENUBAR = 28,
    CTL_MENU = 29,
    CTL_MENUBUTTON = 30,
    CTL_FRAME = 31,
    CTL_FRAMESET = 32,
    CTL_TOOLTIP = 33,
    CTL_HIDDEN = 34,
    CTL_URL = 35,
    CTL_TOOLBAR = 36,
    CTL_WINDOW = 37,
    CTL_LABEL = 38,
    CTL_IMAGE = 39,
    CTL_PLAINTEXT = 40,
    CTL_SELECT_TREE = 41,
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum NODE_TYPE {
    NT_ELEMENT = 0,
    NT_TEXT = 1,
    NT_COMMENT = 2,
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum NODE_INS_TARGET {
    NIT_BEFORE = 0,
    NIT_AFTER = 1,
    NIT_APPEND = 2,
    NIT_PREPEND = 3,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _HGFX {
    _unused: [u8; 0],
}
pub type HGFX = *mut _HGFX;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _HIMG {
    _unused: [u8; 0],
}
pub type HIMG = *mut _HIMG;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _HPATH {
    _unused: [u8; 0],
}
pub type HPATH = *mut _HPATH;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _HTEXT {
    _unused: [u8; 0],
}
pub type HTEXT = *mut _HTEXT;
pub type SC_REAL = f32;
pub type SC_POS = SC_REAL;
pub type SC_DIM = SC_REAL;
pub type SC_ANGLE = SC_REAL;
pub type SC_COLOR = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SC_COLOR_STOP {
    pub color: SC_COLOR,
    pub offset: f32,
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum GRAPHIN_RESULT {
    GRAPHIN_PANIC = -1,
    GRAPHIN_OK = 0,
    GRAPHIN_BAD_PARAM = 1,
    GRAPHIN_FAILURE = 2,
    GRAPHIN_NOTSUPPORTED = 3,
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum DRAW_PATH_MODE {
    DRAW_FILL_ONLY = 1,
    DRAW_STROKE_ONLY = 2,
    DRAW_FILL_AND_STROKE = 3,
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum SCITER_LINE_JOIN_TYPE {
    SCITER_JOIN_MITER = 0,
    SCITER_JOIN_ROUND = 1,
    SCITER_JOIN_BEVEL = 2,
    SCITER_JOIN_MITER_OR_BEVEL = 3,
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum SCITER_LINE_CAP_TYPE {
    SCITER_LINE_CAP_BUTT = 0,
    SCITER_LINE_CAP_SQUARE = 1,
    SCITER_LINE_CAP_ROUND = 2,
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum SCITER_IMAGE_ENCODING {
    SCITER_IMAGE_ENCODING_RAW = 0,
    SCITER_IMAGE_ENCODING_PNG = 1,
    SCITER_IMAGE_ENCODING_JPG = 2,
    SCITER_IMAGE_ENCODING_WEBP = 3,
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum SCITER_PIXMAP_FORMAT {
    SCITER_PIXMAP_FORMAT_IGNORE_ALPHA = 0,
    SCITER_PIXMAP_FORMAT_PREMUL_ALPHA = 1,
    SCITER_PIXMAP_FORMAT_RAW = 2,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SciterGraphicsAPI {
    pub imageCreate: ::std::option::Option<
        unsafe extern "C" fn(
            poutImg: *mut HIMG,
            width: UINT,
            height: UINT,
            withAlpha: SBOOL,
        ) -> GRAPHIN_RESULT,
    >,
    pub imageCreateFromPixmap: ::std::option::Option<
        unsafe extern "C" fn(
            poutImg: *mut HIMG,
            pixmapWidth: UINT,
            pixmapHeight: UINT,
            pixmap_format: UINT,
            pixmap: *const BYTE,
        ) -> GRAPHIN_RESULT,
    >,
    pub imageAddRef: ::std::option::Option<unsafe extern "C" fn(himg: HIMG) -> GRAPHIN_RESULT>,
    pub imageRelease: ::std::option::Option<unsafe extern "C" fn(himg: HIMG) -> GRAPHIN_RESULT>,
    pub imageGetInfo: ::std::option::Option<
        unsafe extern "C" fn(
            himg: HIMG,
            width: *mut UINT,
            height: *mut UINT,
            usesAlpha: *mut SBOOL,
        ) -> GRAPHIN_RESULT,
    >,
    pub imageClear: ::std::option::Option<
        unsafe extern "C" fn(himg: HIMG, byColor: SC_COLOR) -> GRAPHIN_RESULT,
    >,
    pub imageLoad: ::std::option::Option<
        unsafe extern "C" fn(
            bytes: *const BYTE,
            num_bytes: UINT,
            pout_img: *mut HIMG,
        ) -> GRAPHIN_RESULT,
    >,
    pub imageSave: ::std::option::Option<
        unsafe extern "C" fn(
            himg: HIMG,
            pfn: ::std::option::Option<
                unsafe extern "C" fn(arg1: LPVOID, arg2: *const BYTE, arg3: UINT) -> SBOOL,
            >,
            prm: *mut ::std::os::raw::c_void,
            encoding: UINT,
            quality: UINT,
        ) -> GRAPHIN_RESULT,
    >,
    pub RGBA: ::std::option::Option<
        unsafe extern "C" fn(red: UINT, green: UINT, blue: UINT, alpha: UINT) -> SC_COLOR,
    >,
    pub gCreate: ::std::option::Option<
        unsafe extern "C" fn(img: HIMG, pout_gfx: *mut HGFX) -> GRAPHIN_RESULT,
    >,
    pub gAddRef: ::std::option::Option<unsafe extern "C" fn(gfx: HGFX) -> GRAPHIN_RESULT>,
    pub gRelease: ::std::option::Option<unsafe extern "C" fn(gfx: HGFX) -> GRAPHIN_RESULT>,
    pub gLine: ::std::option::Option<
        unsafe extern "C" fn(
            hgfx: HGFX,
            x1: SC_POS,
            y1: SC_POS,
            x2: SC_POS,
            y2: SC_POS,
        ) -> GRAPHIN_RESULT,
    >,
    pub gRectangle: ::std::option::Option<
        unsafe extern "C" fn(
            hgfx: HGFX,
            x1: SC_POS,
            y1: SC_POS,
            x2: SC_POS,
            y2: SC_POS,
        ) -> GRAPHIN_RESULT,
    >,
    pub gRoundedRectangle: ::std::option::Option<
        unsafe extern "C" fn(
            hgfx: HGFX,
            x1: SC_POS,
            y1: SC_POS,
            x2: SC_POS,
            y2: SC_POS,
            radii8: *const SC_DIM,
        ) -> GRAPHIN_RESULT,
    >,
    pub gEllipse: ::std::option::Option<
        unsafe extern "C" fn(
            hgfx: HGFX,
            x: SC_POS,
            y: SC_POS,
            rx: SC_DIM,
            ry: SC_DIM,
        ) -> GRAPHIN_RESULT,
    >,
    pub gArc: ::std::option::Option<
        unsafe extern "C" fn(
            hgfx: HGFX,
            x: SC_POS,
            y: SC_POS,
            rx: SC_POS,
            ry: SC_POS,
            start: SC_ANGLE,
            sweep: SC_ANGLE,
        ) -> GRAPHIN_RESULT,
    >,
    pub gStar: ::std::option::Option<
        unsafe extern "C" fn(
            hgfx: HGFX,
            x: SC_POS,
            y: SC_POS,
            r1: SC_DIM,
            r2: SC_DIM,
            start: SC_ANGLE,
            rays: UINT,
        ) -> GRAPHIN_RESULT,
    >,
    pub gPolygon: ::std::option::Option<
        unsafe extern "C" fn(hgfx: HGFX, xy: *const SC_POS, num_points: UINT) -> GRAPHIN_RESULT,
    >,
    pub gPolyline: ::std::option::Option<
        unsafe extern "C" fn(hgfx: HGFX, xy: *const SC_POS, num_points: UINT) -> GRAPHIN_RESULT,
    >,
    pub pathCreate: ::std::option::Option<unsafe extern "C" fn(path: *mut HPATH) -> GRAPHIN_RESULT>,
    pub pathAddRef: ::std::option::Option<unsafe extern "C" fn(path: HPATH) -> GRAPHIN_RESULT>,
    pub pathRelease: ::std::option::Option<unsafe extern "C" fn(path: HPATH) -> GRAPHIN_RESULT>,
    pub pathMoveTo: ::std::option::Option<
        unsafe extern "C" fn(path: HPATH, x: SC_POS, y: SC_POS, relative: SBOOL) -> GRAPHIN_RESULT,
    >,
    pub pathLineTo: ::std::option::Option<
        unsafe extern "C" fn(path: HPATH, x: SC_POS, y: SC_POS, relative: SBOOL) -> GRAPHIN_RESULT,
    >,
    pub pathArcTo: ::std::option::Option<
        unsafe extern "C" fn(
            path: HPATH,
            x: SC_POS,
            y: SC_POS,
            angle: SC_ANGLE,
            rx: SC_DIM,
            ry: SC_DIM,
            is_large_arc: SBOOL,
            clockwise: SBOOL,
            relative: SBOOL,
        ) -> GRAPHIN_RESULT,
    >,
    pub pathQuadraticCurveTo: ::std::option::Option<
        unsafe extern "C" fn(
            path: HPATH,
            xc: SC_POS,
            yc: SC_POS,
            x: SC_POS,
            y: SC_POS,
            relative: SBOOL,
        ) -> GRAPHIN_RESULT,
    >,
    pub pathBezierCurveTo: ::std::option::Option<
        unsafe extern "C" fn(
            path: HPATH,
            xc1: SC_POS,
            yc1: SC_POS,
            xc2: SC_POS,
            yc2: SC_POS,
            x: SC_POS,
            y: SC_POS,
            relative: SBOOL,
        ) -> GRAPHIN_RESULT,
    >,
    pub pathClosePath: ::std::option::Option<unsafe extern "C" fn(path: HPATH) -> GRAPHIN_RESULT>,
    pub gDrawPath: ::std::option::Option<
        unsafe extern "C" fn(hgfx: HGFX, path: HPATH, dpm: DRAW_PATH_MODE) -> GRAPHIN_RESULT,
    >,
    pub gRotate: ::std::option::Option<
        unsafe extern "C" fn(
            hgfx: HGFX,
            radians: SC_ANGLE,
            cx: *const SC_POS,
            cy: *const SC_POS,
        ) -> GRAPHIN_RESULT,
    >,
    pub gTranslate: ::std::option::Option<
        unsafe extern "C" fn(hgfx: HGFX, cx: SC_POS, cy: SC_POS) -> GRAPHIN_RESULT,
    >,
    pub gScale: ::std::option::Option<
        unsafe extern "C" fn(hgfx: HGFX, x: SC_DIM, y: SC_DIM) -> GRAPHIN_RESULT,
    >,
    pub gSkew: ::std::option::Option<
        unsafe extern "C" fn(hgfx: HGFX, dx: SC_DIM, dy: SC_DIM) -> GRAPHIN_RESULT,
    >,
    pub gTransform: ::std::option::Option<
        unsafe extern "C" fn(
            hgfx: HGFX,
            m11: SC_POS,
            m12: SC_POS,
            m21: SC_POS,
            m22: SC_POS,
            dx: SC_POS,
            dy: SC_POS,
        ) -> GRAPHIN_RESULT,
    >,
    pub gStateSave: ::std::option::Option<unsafe extern "C" fn(hgfx: HGFX) -> GRAPHIN_RESULT>,
    pub gStateRestore: ::std::option::Option<unsafe extern "C" fn(hgfx: HGFX) -> GRAPHIN_RESULT>,
    pub gLineWidth:
        ::std::option::Option<unsafe extern "C" fn(hgfx: HGFX, width: SC_DIM) -> GRAPHIN_RESULT>,
    pub gLineJoin: ::std::option::Option<
        unsafe extern "C" fn(hgfx: HGFX, type_: SCITER_LINE_JOIN_TYPE) -> GRAPHIN_RESULT,
    >,
    pub gLineCap: ::std::option::Option<
        unsafe extern "C" fn(hgfx: HGFX, type_: SCITER_LINE_CAP_TYPE) -> GRAPHIN_RESULT,
    >,
    pub gLineColor:
        ::std::option::Option<unsafe extern "C" fn(hgfx: HGFX, c: SC_COLOR) -> GRAPHIN_RESULT>,
    pub gFillColor:
        ::std::option::Option<unsafe extern "C" fn(hgfx: HGFX, color: SC_COLOR) -> GRAPHIN_RESULT>,
    pub gLineGradientLinear: ::std::option::Option<
        unsafe extern "C" fn(
            hgfx: HGFX,
            x1: SC_POS,
            y1: SC_POS,
            x2: SC_POS,
            y2: SC_POS,
            stops: *const SC_COLOR_STOP,
            nstops: UINT,
        ) -> GRAPHIN_RESULT,
    >,
    pub gFillGradientLinear: ::std::option::Option<
        unsafe extern "C" fn(
            hgfx: HGFX,
            x1: SC_POS,
            y1: SC_POS,
            x2: SC_POS,
            y2: SC_POS,
            stops: *const SC_COLOR_STOP,
            nstops: UINT,
        ) -> GRAPHIN_RESULT,
    >,
    pub gLineGradientRadial: ::std::option::Option<
        unsafe extern "C" fn(
            hgfx: HGFX,
            x: SC_POS,
            y: SC_POS,
            rx: SC_DIM,
            ry: SC_DIM,
            stops: *const SC_COLOR_STOP,
            nstops: UINT,
        ) -> GRAPHIN_RESULT,
    >,
    pub gFillGradientRadial: ::std::option::Option<
        unsafe extern "C" fn(
            hgfx: HGFX,
            x: SC_POS,
            y: SC_POS,
            rx: SC_DIM,
            ry: SC_DIM,
            stops: *const SC_COLOR_STOP,
            nstops: UINT,
        ) -> GRAPHIN_RESULT,
    >,
    pub gFillMode:
        ::std::option::Option<unsafe extern "C" fn(hgfx: HGFX, even_odd: SBOOL) -> GRAPHIN_RESULT>,
    pub textCreateForElement: ::std::option::Option<
        unsafe extern "C" fn(
            ptext: *mut HTEXT,
            text: LPCWSTR,
            textLength: UINT,
            he: HELEMENT,
            classNameOrNull: LPCWSTR,
        ) -> GRAPHIN_RESULT,
    >,
    pub textCreateForElementAndStyle: ::std::option::Option<
        unsafe extern "C" fn(
            ptext: *mut HTEXT,
            text: LPCWSTR,
            textLength: UINT,
            he: HELEMENT,
            style: LPCWSTR,
            styleLength: UINT,
        ) -> GRAPHIN_RESULT,
    >,
    pub textAddRef: ::std::option::Option<unsafe extern "C" fn(path: HTEXT) -> GRAPHIN_RESULT>,
    pub textRelease: ::std::option::Option<unsafe extern "C" fn(path: HTEXT) -> GRAPHIN_RESULT>,
    pub textGetMetrics: ::std::option::Option<
        unsafe extern "C" fn(
            text: HTEXT,
            minWidth: *mut SC_DIM,
            maxWidth: *mut SC_DIM,
            height: *mut SC_DIM,
            ascent: *mut SC_DIM,
            descent: *mut SC_DIM,
            nLines: *mut UINT,
        ) -> GRAPHIN_RESULT,
    >,
    pub textSetBox: ::std::option::Option<
        unsafe extern "C" fn(text: HTEXT, width: SC_DIM, height: SC_DIM) -> GRAPHIN_RESULT,
    >,
    pub gDrawText: ::std::option::Option<
        unsafe extern "C" fn(
            hgfx: HGFX,
            text: HTEXT,
            px: SC_POS,
            py: SC_POS,
            position: UINT,
        ) -> GRAPHIN_RESULT,
    >,
    pub gDrawImage: ::std::option::Option<
        unsafe extern "C" fn(
            hgfx: HGFX,
            himg: HIMG,
            x: SC_POS,
            y: SC_POS,
            w: *const SC_DIM,
            h: *const SC_DIM,
            ix: *const UINT,
            iy: *const UINT,
            iw: *const UINT,
            ih: *const UINT,
            opacity: *const f32,
        ) -> GRAPHIN_RESULT,
    >,
    pub gWorldToScreen: ::std::option::Option<
        unsafe extern "C" fn(
            hgfx: HGFX,
            inout_x: *mut SC_POS,
            inout_y: *mut SC_POS,
        ) -> GRAPHIN_RESULT,
    >,
    pub gScreenToWorld: ::std::option::Option<
        unsafe extern "C" fn(
            hgfx: HGFX,
            inout_x: *mut SC_POS,
            inout_y: *mut SC_POS,
        ) -> GRAPHIN_RESULT,
    >,
    pub gPushClipBox: ::std::option::Option<
        unsafe extern "C" fn(
            hgfx: HGFX,
            x1: SC_POS,
            y1: SC_POS,
            x2: SC_POS,
            y2: SC_POS,
            opacity: f32,
        ) -> GRAPHIN_RESULT,
    >,
    pub gPushClipPath: ::std::option::Option<
        unsafe extern "C" fn(hgfx: HGFX, hpath: HPATH, opacity: f32) -> GRAPHIN_RESULT,
    >,
    pub gPopClip: ::std::option::Option<unsafe extern "C" fn(hgfx: HGFX) -> GRAPHIN_RESULT>,
    pub imagePaint: ::std::option::Option<
        unsafe extern "C" fn(
            himg: HIMG,
            pPainter: ::std::option::Option<
                unsafe extern "C" fn(arg1: LPVOID, arg2: HGFX, arg3: UINT, arg4: UINT),
            >,
            prm: *mut ::std::os::raw::c_void,
        ) -> GRAPHIN_RESULT,
    >,
    pub vWrapGfx: ::std::option::Option<
        unsafe extern "C" fn(hgfx: HGFX, toValue: *mut VALUE) -> GRAPHIN_RESULT,
    >,
    pub vWrapImage: ::std::option::Option<
        unsafe extern "C" fn(himg: HIMG, toValue: *mut VALUE) -> GRAPHIN_RESULT,
    >,
    pub vWrapPath: ::std::option::Option<
        unsafe extern "C" fn(hpath: HPATH, toValue: *mut VALUE) -> GRAPHIN_RESULT,
    >,
    pub vWrapText: ::std::option::Option<
        unsafe extern "C" fn(htext: HTEXT, toValue: *mut VALUE) -> GRAPHIN_RESULT,
    >,
    pub vUnWrapGfx: ::std::option::Option<
        unsafe extern "C" fn(fromValue: *const VALUE, phgfx: *mut HGFX) -> GRAPHIN_RESULT,
    >,
    pub vUnWrapImage: ::std::option::Option<
        unsafe extern "C" fn(fromValue: *const VALUE, phimg: *mut HIMG) -> GRAPHIN_RESULT,
    >,
    pub vUnWrapPath: ::std::option::Option<
        unsafe extern "C" fn(fromValue: *const VALUE, phpath: *mut HPATH) -> GRAPHIN_RESULT,
    >,
    pub vUnWrapText: ::std::option::Option<
        unsafe extern "C" fn(fromValue: *const VALUE, phtext: *mut HTEXT) -> GRAPHIN_RESULT,
    >,
    pub gFlush: ::std::option::Option<unsafe extern "C" fn(hgfx: HGFX) -> GRAPHIN_RESULT>,
    pub imageCreateFromElement: ::std::option::Option<
        unsafe extern "C" fn(poutImg: *mut HIMG, domElement: HELEMENT) -> GRAPHIN_RESULT,
    >,
    pub gGetNativeDC: ::std::option::Option<
        unsafe extern "C" fn(
            hgfx: HGFX,
            nativeDcType: UINT,
            pDC: *mut *mut ::std::os::raw::c_void,
        ) -> GRAPHIN_RESULT,
    >,
}
pub type LPSciterGraphicsAPI = *mut SciterGraphicsAPI;
pub type som_atom_t = UINT64;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct som_asset_t {
    pub isa: *mut som_asset_class_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct som_asset_class_t {
    pub asset_add_ref: ::std::option::Option<
        unsafe extern "C" fn(thing: *mut som_asset_t) -> ::std::os::raw::c_long,
    >,
    pub asset_release: ::std::option::Option<
        unsafe extern "C" fn(thing: *mut som_asset_t) -> ::std::os::raw::c_long,
    >,
    pub asset_get_interface: ::std::option::Option<
        unsafe extern "C" fn(
            thing: *mut som_asset_t,
            name: *const ::std::os::raw::c_char,
            out: *mut *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_long,
    >,
    pub asset_get_passport:
        ::std::option::Option<unsafe extern "C" fn(thing: *mut som_asset_t) -> *mut som_passport_t>,
}
pub type som_prop_getter_t = ::std::option::Option<
    unsafe extern "C" fn(thing: *mut som_asset_t, p_value: *mut SCITER_VALUE) -> SBOOL,
>;
pub type som_prop_setter_t = ::std::option::Option<
    unsafe extern "C" fn(thing: *mut som_asset_t, p_value: *mut SCITER_VALUE) -> SBOOL,
>;
pub type som_item_getter_t = ::std::option::Option<
    unsafe extern "C" fn(
        thing: *mut som_asset_t,
        p_key: *const SCITER_VALUE,
        p_value: *mut SCITER_VALUE,
    ) -> SBOOL,
>;
pub type som_item_setter_t = ::std::option::Option<
    unsafe extern "C" fn(
        thing: *mut som_asset_t,
        p_key: *const SCITER_VALUE,
        p_value: *const SCITER_VALUE,
    ) -> SBOOL,
>;
pub type som_item_next_t = ::std::option::Option<
    unsafe extern "C" fn(
        thing: *mut som_asset_t,
        p_idx: *mut SCITER_VALUE,
        p_value: *mut SCITER_VALUE,
    ) -> SBOOL,
>;
pub type som_any_prop_getter_t = ::std::option::Option<
    unsafe extern "C" fn(
        thing: *mut som_asset_t,
        propSymbol: UINT64,
        p_value: *mut SCITER_VALUE,
    ) -> SBOOL,
>;
pub type som_any_prop_setter_t = ::std::option::Option<
    unsafe extern "C" fn(
        thing: *mut som_asset_t,
        propSymbol: UINT64,
        p_value: *const SCITER_VALUE,
    ) -> SBOOL,
>;
pub type som_method_t = ::std::option::Option<
    unsafe extern "C" fn(
        thing: *mut som_asset_t,
        argc: UINT,
        argv: *const SCITER_VALUE,
        p_result: *mut SCITER_VALUE,
    ) -> SBOOL,
>;
pub type som_dispose_t = ::std::option::Option<unsafe extern "C" fn(thing: *mut som_asset_t)>;
pub type som_name_resolver_t = ::std::option::Option<
    unsafe extern "C" fn(
        thing: *mut som_asset_t,
        propSymbol: som_atom_t,
        pIndex: *mut UINT,
        pIsMethod: *mut SBOOL,
    ) -> SBOOL,
>;
impl SOM_PROP_TYPE {
    pub const SOM_PROP_ACCSESSOR: SOM_PROP_TYPE = SOM_PROP_TYPE(0);
}
impl SOM_PROP_TYPE {
    pub const SOM_PROP_INT32: SOM_PROP_TYPE = SOM_PROP_TYPE(1);
}
impl SOM_PROP_TYPE {
    pub const SOM_PROP_INT64: SOM_PROP_TYPE = SOM_PROP_TYPE(2);
}
impl SOM_PROP_TYPE {
    pub const SOM_PROP_FLOAT: SOM_PROP_TYPE = SOM_PROP_TYPE(3);
}
impl SOM_PROP_TYPE {
    pub const SOM_PROP_STRING: SOM_PROP_TYPE = SOM_PROP_TYPE(4);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct SOM_PROP_TYPE(pub ::std::os::raw::c_int);
#[repr(C)]
#[derive(Copy, Clone)]
pub struct som_property_def_t {
    pub type_: isize,
    pub name: som_atom_t,
    pub u: som_property_def_t__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union som_property_def_t__bindgen_ty_1 {
    pub accs: som_property_def_t__bindgen_ty_1__bindgen_ty_1,
    pub i32_: i32,
    pub i64_: i64,
    pub f64_: f64,
    pub str_: *const ::std::os::raw::c_char,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct som_property_def_t__bindgen_ty_1__bindgen_ty_1 {
    pub getter: som_prop_getter_t,
    pub setter: som_prop_setter_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct som_method_def_t {
    pub reserved: *mut ::std::os::raw::c_void,
    pub name: som_atom_t,
    pub params: usize,
    pub func: som_method_t,
}
impl som_passport_flags {
    pub const SOM_SEALED_OBJECT: som_passport_flags = som_passport_flags(0);
}
impl som_passport_flags {
    pub const SOM_EXTENDABLE_OBJECT: som_passport_flags = som_passport_flags(1);
}
impl som_passport_flags {
    pub const SOM_HAS_NAME_RESOLVER: som_passport_flags = som_passport_flags(2);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct som_passport_flags(pub ::std::os::raw::c_int);
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct som_passport_t {
    pub flags: UINT64,
    pub name: som_atom_t,
    pub properties: *const som_property_def_t,
    pub n_properties: usize,
    pub methods: *const som_method_def_t,
    pub n_methods: usize,
    pub item_getter: som_item_getter_t,
    pub item_setter: som_item_setter_t,
    pub item_next: som_item_next_t,
    pub prop_getter: som_any_prop_getter_t,
    pub prop_setter: som_any_prop_setter_t,
    pub name_resolver: som_name_resolver_t,
    pub reserved: *mut ::std::os::raw::c_void,
}
impl EVENT_GROUPS {
    pub const HANDLE_INITIALIZATION: EVENT_GROUPS = EVENT_GROUPS(0);
}
impl EVENT_GROUPS {
    pub const HANDLE_MOUSE: EVENT_GROUPS = EVENT_GROUPS(1);
}
impl EVENT_GROUPS {
    pub const HANDLE_KEY: EVENT_GROUPS = EVENT_GROUPS(2);
}
impl EVENT_GROUPS {
    pub const HANDLE_FOCUS: EVENT_GROUPS = EVENT_GROUPS(4);
}
impl EVENT_GROUPS {
    pub const HANDLE_SCROLL: EVENT_GROUPS = EVENT_GROUPS(8);
}
impl EVENT_GROUPS {
    pub const HANDLE_TIMER: EVENT_GROUPS = EVENT_GROUPS(16);
}
impl EVENT_GROUPS {
    pub const HANDLE_SIZE: EVENT_GROUPS = EVENT_GROUPS(32);
}
impl EVENT_GROUPS {
    pub const HANDLE_DRAW: EVENT_GROUPS = EVENT_GROUPS(64);
}
impl EVENT_GROUPS {
    pub const HANDLE_DATA_ARRIVED: EVENT_GROUPS = EVENT_GROUPS(128);
}
impl EVENT_GROUPS {
    pub const HANDLE_BEHAVIOR_EVENT: EVENT_GROUPS = EVENT_GROUPS(256);
}
impl EVENT_GROUPS {
    pub const HANDLE_METHOD_CALL: EVENT_GROUPS = EVENT_GROUPS(512);
}
impl EVENT_GROUPS {
    pub const HANDLE_SCRIPTING_METHOD_CALL: EVENT_GROUPS = EVENT_GROUPS(1024);
}
impl EVENT_GROUPS {
    pub const HANDLE_STYLE_CHANGE: EVENT_GROUPS = EVENT_GROUPS(2048);
}
impl EVENT_GROUPS {
    pub const HANDLE_EXCHANGE: EVENT_GROUPS = EVENT_GROUPS(4096);
}
impl EVENT_GROUPS {
    pub const HANDLE_GESTURE: EVENT_GROUPS = EVENT_GROUPS(8192);
}
impl EVENT_GROUPS {
    pub const HANDLE_ATTRIBUTE_CHANGE: EVENT_GROUPS = EVENT_GROUPS(16384);
}
impl EVENT_GROUPS {
    pub const HANDLE_SOM: EVENT_GROUPS = EVENT_GROUPS(32768);
}
impl EVENT_GROUPS {
    pub const HANDLE_ALL: EVENT_GROUPS = EVENT_GROUPS(65535);
}
impl EVENT_GROUPS {
    pub const SUBSCRIPTIONS_REQUEST: EVENT_GROUPS = EVENT_GROUPS(-1);
}
impl ::std::ops::BitOr<EVENT_GROUPS> for EVENT_GROUPS {
    type Output = Self;
    #[inline]
    fn bitor(self, other: Self) -> Self {
        EVENT_GROUPS(self.0 | other.0)
    }
}
impl ::std::ops::BitOrAssign for EVENT_GROUPS {
    #[inline]
    fn bitor_assign(&mut self, rhs: EVENT_GROUPS) {
        self.0 |= rhs.0;
    }
}
impl ::std::ops::BitAnd<EVENT_GROUPS> for EVENT_GROUPS {
    type Output = Self;
    #[inline]
    fn bitand(self, other: Self) -> Self {
        EVENT_GROUPS(self.0 & other.0)
    }
}
impl ::std::ops::BitAndAssign for EVENT_GROUPS {
    #[inline]
    fn bitand_assign(&mut self, rhs: EVENT_GROUPS) {
        self.0 &= rhs.0;
    }
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct EVENT_GROUPS(pub ::std::os::raw::c_int);
pub type LPElementEventProc = ::std::option::Option<
    unsafe extern "C" fn(arg1: LPVOID, arg2: HELEMENT, arg3: UINT, arg4: LPVOID) -> SBOOL,
>;
#[repr(i32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum PHASE_MASK {
    BUBBLING = 0,
    SINKING = 32768,
    HANDLED = 65536,
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum MOUSE_BUTTONS {
    MAIN_MOUSE_BUTTON = 1,
    PROP_MOUSE_BUTTON = 2,
    MIDDLE_MOUSE_BUTTON = 4,
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum KEYBOARD_STATES {
    CONTROL_KEY_PRESSED = 1,
    SHIFT_KEY_PRESSED = 2,
    ALT_KEY_PRESSED = 4,
    RIGHT_SHIFT_KEY_PRESSED = 8,
    CMD_KEY_PRESSED = 16,
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum INITIALIZATION_EVENTS {
    BEHAVIOR_DETACH = 0,
    BEHAVIOR_ATTACH = 1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct INITIALIZATION_PARAMS {
    pub cmd: UINT,
}
impl SOM_EVENTS {
    pub const SOM_GET_PASSPORT: SOM_EVENTS = SOM_EVENTS(0);
}
impl SOM_EVENTS {
    pub const SOM_GET_ASSET: SOM_EVENTS = SOM_EVENTS(1);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct SOM_EVENTS(pub ::std::os::raw::c_int);
#[repr(C)]
#[derive(Copy, Clone)]
pub struct SOM_PARAMS {
    pub cmd: UINT,
    pub data: SOM_PARAMS__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union SOM_PARAMS__bindgen_ty_1 {
    pub passport: *mut som_passport_t,
    pub asset: *mut som_asset_t,
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum DRAGGING_TYPE {
    NO_DRAGGING = 0,
    DRAGGING_MOVE = 1,
    DRAGGING_COPY = 2,
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum MOUSE_EVENTS {
    MOUSE_ENTER = 0,
    MOUSE_LEAVE = 1,
    MOUSE_MOVE = 2,
    MOUSE_UP = 3,
    MOUSE_DOWN = 4,
    MOUSE_DCLICK = 5,
    MOUSE_WHEEL = 6,
    MOUSE_TICK = 7,
    MOUSE_IDLE = 8,
    DROP = 9,
    DRAG_ENTER = 10,
    DRAG_LEAVE = 11,
    DRAG_REQUEST = 12,
    MOUSE_TCLICK = 15,
    MOUSE_DRAG_REQUEST = 254,
    MOUSE_CLICK = 255,
    DRAGGING = 256,
    MOUSE_HIT_TEST = 4094,
}
#[repr(C)]
pub struct MOUSE_PARAMS {
    pub cmd: UINT,
    pub target: HELEMENT,
    pub pos: POINT,
    pub pos_view: POINT,
    pub button_state: UINT,
    pub alt_state: UINT,
    pub cursor_type: UINT,
    pub is_on_icon: SBOOL,
    pub dragging: HELEMENT,
    pub dragging_mode: UINT,
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum CURSOR_TYPE {
    CURSOR_ARROW = 0,
    CURSOR_IBEAM = 1,
    CURSOR_WAIT = 2,
    CURSOR_CROSS = 3,
    CURSOR_UPARROW = 4,
    CURSOR_SIZENWSE = 5,
    CURSOR_SIZENESW = 6,
    CURSOR_SIZEWE = 7,
    CURSOR_SIZENS = 8,
    CURSOR_SIZEALL = 9,
    CURSOR_NO = 10,
    CURSOR_APPSTARTING = 11,
    CURSOR_HELP = 12,
    CURSOR_HAND = 13,
    CURSOR_DRAG_MOVE = 14,
    CURSOR_DRAG_COPY = 15,
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum KEY_EVENTS {
    KEY_DOWN = 0,
    KEY_UP = 1,
    KEY_CHAR = 2,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct KEY_PARAMS {
    pub cmd: UINT,
    pub target: HELEMENT,
    pub key_code: UINT,
    pub alt_state: UINT,
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum FOCUS_EVENTS {
    FOCUS_OUT = 0,
    FOCUS_IN = 1,
    FOCUS_GOT = 2,
    FOCUS_LOST = 3,
    FOCUS_REQUEST = 4,
    FOCUS_ADVANCE_REQUEST = 5,
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum FOCUS_CMD_TYPE {
    FOCUS_RQ_NEXT = 0,
    FOCUS_RQ_PREV = 1,
    FOCUS_RQ_HOME = 2,
    FOCUS_RQ_END = 3,
    FOCUS_RQ_LEFT = 4,
    FOCUS_RQ_RIGHT = 5,
    FOCUS_RQ_UP = 6,
    FOCUS_RQ_DOWN = 7,
    FOCUS_RQ_FIRST = 8,
    FOCUS_RQ_LAST = 9,
    FOCUS_RQ_END_REACHED = 32768,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FOCUS_PARAMS {
    pub cmd: UINT,
    pub target: HELEMENT,
    pub cause: UINT,
    pub cancel: SBOOL,
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum SCROLL_EVENTS {
    SCROLL_HOME = 0,
    SCROLL_END = 1,
    SCROLL_STEP_PLUS = 2,
    SCROLL_STEP_MINUS = 3,
    SCROLL_PAGE_PLUS = 4,
    SCROLL_PAGE_MINUS = 5,
    SCROLL_POS = 6,
    SCROLL_SLIDER_RELEASED = 7,
    SCROLL_CORNER_PRESSED = 8,
    SCROLL_CORNER_RELEASED = 9,
    SCROLL_SLIDER_PRESSED = 10,
    SCROLL_ANIMATION_START = 11,
    SCROLL_ANIMATION_END = 12,
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum SCROLL_SOURCE {
    SCROLL_SOURCE_UNKNOWN = 0,
    SCROLL_SOURCE_KEYBOARD = 1,
    SCROLL_SOURCE_SCROLLBAR = 2,
    SCROLL_SOURCE_ANIMATOR = 3,
    SCROLL_SOURCE_WHEEL = 4,
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum SCROLLBAR_PART {
    SCROLLBAR_BASE = 0,
    SCROLLBAR_PLUS = 1,
    SCROLLBAR_MINUS = 2,
    SCROLLBAR_SLIDER = 3,
    SCROLLBAR_PAGE_MINUS = 4,
    SCROLLBAR_PAGE_PLUS = 5,
    SCROLLBAR_CORNER = 6,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SCROLL_PARAMS {
    pub cmd: UINT,
    pub target: HELEMENT,
    pub pos: INT,
    pub vertical: SBOOL,
    pub source: UINT,
    pub reason: UINT,
}
#[repr(C)]
pub struct GESTURE_PARAMS {
    pub cmd: UINT,
    pub target: HELEMENT,
    pub pos: POINT,
    pub pos_view: POINT,
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum EXCHANGE_CMD {
    X_DRAG_ENTER = 0,
    X_DRAG_LEAVE = 1,
    X_DRAG = 2,
    X_DROP = 3,
    X_PASTE = 4,
    X_DRAG_REQUEST = 5,
    X_DRAG_CANCEL = 6,
    X_WILL_ACCEPT_DROP = 7,
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum DD_MODES {
    DD_MODE_NONE = 0,
    DD_MODE_COPY = 1,
    DD_MODE_MOVE = 2,
    DD_MODE_COPY_OR_MOVE = 3,
    DD_MODE_LINK = 4,
}
#[repr(C)]
pub struct EXCHANGE_PARAMS {
    pub cmd: UINT,
    pub target: HELEMENT,
    pub source: HELEMENT,
    pub pos: POINT,
    pub pos_view: POINT,
    pub mode: UINT,
    pub data: SCITER_VALUE,
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum DRAW_EVENTS {
    DRAW_BACKGROUND = 0,
    DRAW_CONTENT = 1,
    DRAW_FOREGROUND = 2,
    DRAW_OUTLINE = 3,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SCITER_GRAPHICS {
    _unused: [u8; 0],
}
#[repr(C)]
pub struct DRAW_PARAMS {
    pub cmd: UINT,
    pub gfx: HGFX,
    pub area: RECT,
    pub reserved: UINT,
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum CONTENT_CHANGE_BITS {
    CONTENT_ADDED = 1,
    CONTENT_REMOVED = 2,
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum BEHAVIOR_EVENTS {
    BUTTON_CLICK = 0,
    BUTTON_PRESS = 1,
    VALUE_CHANGED = 2,
    VALUE_CHANGING = 3,
    SELECTION_CHANGED = 5,
    SELECTION_CHANGING = 12,
    POPUP_REQUEST = 7,
    POPUP_READY = 8,
    POPUP_DISMISSED = 9,
    MENU_ITEM_ACTIVE = 10,
    MENU_ITEM_CLICK = 11,
    CONTEXT_MENU_REQUEST = 16,
    VISUAL_STATUS_CHANGED = 17,
    DISABLED_STATUS_CHANGED = 18,
    POPUP_DISMISSING = 19,
    CONTENT_CHANGED = 21,
    HYPERLINK_CLICK = 128,
    ELEMENT_COLLAPSED = 144,
    ELEMENT_EXPANDED = 145,
    ACTIVATE_CHILD = 146,
    FORM_SUBMIT = 150,
    FORM_RESET = 151,
    DOCUMENT_COMPLETE = 152,
    HISTORY_PUSH = 153,
    HISTORY_DROP = 154,
    HISTORY_PRIOR = 155,
    HISTORY_NEXT = 156,
    HISTORY_STATE_CHANGED = 157,
    CLOSE_POPUP = 158,
    REQUEST_TOOLTIP = 159,
    ANIMATION = 160,
    TRANSITION = 161,
    SWIPE = 176,
    DOCUMENT_CREATED = 192,
    DOCUMENT_CLOSE_REQUEST = 193,
    DOCUMENT_CLOSE = 194,
    DOCUMENT_READY = 195,
    DOCUMENT_PARSED = 196,
    DOCUMENT_CLOSING = 198,
    CONTAINER_CLOSE_REQUEST = 199,
    CONTAINER_CLOSING = 200,
    VIDEO_INITIALIZED = 209,
    VIDEO_STARTED = 210,
    VIDEO_STOPPED = 211,
    VIDEO_BIND_RQ = 212,
    VIDEO_FRAME_REQUEST = 216,
    PAGINATION_STARTS = 224,
    PAGINATION_PAGE = 225,
    PAGINATION_ENDS = 226,
    CUSTOM = 240,
    FIRST_APPLICATION_EVENT_CODE = 256,
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum CLICK_REASON {
    BY_MOUSE_CLICK = 0,
    BY_KEY_CLICK = 1,
    SYNTHESIZED = 2,
    BY_MOUSE_ON_ICON = 3,
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum EDIT_CHANGED_REASON {
    BY_INS_CHAR = 0,
    BY_INS_CHARS = 1,
    BY_DEL_CHAR = 2,
    BY_DEL_CHARS = 3,
    BY_UNDO_REDO = 4,
}
#[repr(C)]
pub struct BEHAVIOR_EVENT_PARAMS {
    pub cmd: UINT,
    pub heTarget: HELEMENT,
    pub he: HELEMENT,
    pub reason: UINT_PTR,
    pub data: SCITER_VALUE,
    pub name: LPCWSTR,
}
#[repr(C)]
pub struct TIMER_PARAMS {
    pub timerId: UINT_PTR,
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum BEHAVIOR_METHOD_IDENTIFIERS {
    DO_CLICK = 0,
    IS_EMPTY = 252,
    GET_VALUE = 253,
    SET_VALUE = 254,
    FIRST_APPLICATION_METHOD_ID = 256,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SCRIPTING_METHOD_PARAMS {
    pub name: LPCSTR,
    pub argv: *const SCITER_VALUE,
    pub argc: UINT,
    pub result: SCITER_VALUE,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VALUE_PARAMS {
    pub methodID: UINT,
    pub val: SCITER_VALUE,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IS_EMPTY_PARAMS {
    pub methodID: UINT,
    pub is_empty: UINT,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DATA_ARRIVED_PARAMS {
    pub initiator: HELEMENT,
    pub data: LPCBYTE,
    pub dataSize: UINT,
    pub dataType: UINT,
    pub status: UINT,
    pub uri: LPCWSTR,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ATTRIBUTE_CHANGE_PARAMS {
    pub he: HELEMENT,
    pub name: LPCSTR,
    pub value: LPCWSTR,
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum SC_LOAD_DATA_RETURN_CODES {
    LOAD_OK = 0,
    LOAD_DISCARD = 1,
    LOAD_DELAYED = 2,
    LOAD_MYSELF = 3,
}
#[repr(C)]
pub struct SCITER_CALLBACK_NOTIFICATION {
    pub code: UINT,
    pub hwnd: HWND,
}
pub type LPSCITER_CALLBACK_NOTIFICATION = *mut SCITER_CALLBACK_NOTIFICATION;
pub type LPSciterHostCallback = ::std::option::Option<
    unsafe extern "C" fn(arg1: LPSCITER_CALLBACK_NOTIFICATION, arg2: LPVOID) -> UINT,
>;
#[repr(C)]
pub struct SCN_LOAD_DATA {
    pub code: UINT,
    pub hwnd: HWND,
    pub uri: LPCWSTR,
    pub outData: LPCBYTE,
    pub outDataSize: UINT,
    pub dataType: UINT,
    pub requestId: HREQUEST,
    pub principal: HELEMENT,
    pub initiator: HELEMENT,
}
pub type LPSCN_LOAD_DATA = *mut SCN_LOAD_DATA;
#[repr(C)]
pub struct SCN_DATA_LOADED {
    pub code: UINT,
    pub hwnd: HWND,
    pub uri: LPCWSTR,
    pub data: LPCBYTE,
    pub dataSize: UINT,
    pub dataType: UINT,
    pub status: UINT,
}
pub type LPSCN_DATA_LOADED = *mut SCN_DATA_LOADED;
#[repr(C)]
pub struct SCN_ATTACH_BEHAVIOR {
    pub code: UINT,
    pub hwnd: HWND,
    pub element: HELEMENT,
    pub behaviorName: LPCSTR,
    pub elementProc: ::std::option::Option<
        unsafe extern "C" fn(arg1: LPVOID, arg2: HELEMENT, arg3: UINT, arg4: LPVOID) -> SBOOL,
    >,
    pub elementTag: LPVOID,
}
pub type LPSCN_ATTACH_BEHAVIOR = *mut SCN_ATTACH_BEHAVIOR;
#[repr(C)]
pub struct SCN_ENGINE_DESTROYED {
    pub code: UINT,
    pub hwnd: HWND,
}
pub type LPSCN_ENGINE_DESTROYED = *mut SCN_ENGINE_DESTROYED;
#[repr(C)]
pub struct SCN_POSTED_NOTIFICATION {
    pub code: UINT,
    pub hwnd: HWND,
    pub wparam: UINT_PTR,
    pub lparam: UINT_PTR,
    pub lreturn: UINT_PTR,
}
pub type LPSCN_POSTED_NOTIFICATION = *mut SCN_POSTED_NOTIFICATION;
#[repr(C)]
pub struct SCN_GRAPHICS_CRITICAL_FAILURE {
    pub code: UINT,
    pub hwnd: HWND,
}
pub type LPSCN_GRAPHICS_CRITICAL_FAILURE = *mut SCN_GRAPHICS_CRITICAL_FAILURE;
#[repr(C)]
pub struct SCN_KEYBOARD_REQUEST {
    pub code: UINT,
    pub hwnd: HWND,
    pub keyboardType: LPCSTR,
}
pub type LPSCN_KEYBOARD_REQUEST = *mut SCN_KEYBOARD_REQUEST;
#[repr(C)]
pub struct SCN_INVALIDATE_RECT {
    pub code: UINT,
    pub hwnd: HWND,
    pub invalidRect: RECT,
}
pub type LPSCN_INVALIDATE_RECT = *mut SCN_INVALIDATE_RECT;
#[repr(C)]
pub struct SCN_SET_CURSOR {
    pub code: UINT,
    pub hwnd: HWND,
    pub cursorId: UINT,
    pub cursorUrl: LPCSTR,
}
pub type LPSCN_SET_CURSOR = *mut SCN_SET_CURSOR;
impl SCRIPT_RUNTIME_FEATURES {
    pub const ALLOW_FILE_IO: SCRIPT_RUNTIME_FEATURES = SCRIPT_RUNTIME_FEATURES(1);
}
impl SCRIPT_RUNTIME_FEATURES {
    pub const ALLOW_SOCKET_IO: SCRIPT_RUNTIME_FEATURES = SCRIPT_RUNTIME_FEATURES(2);
}
impl SCRIPT_RUNTIME_FEATURES {
    pub const ALLOW_EVAL: SCRIPT_RUNTIME_FEATURES = SCRIPT_RUNTIME_FEATURES(4);
}
impl SCRIPT_RUNTIME_FEATURES {
    pub const ALLOW_SYSINFO: SCRIPT_RUNTIME_FEATURES = SCRIPT_RUNTIME_FEATURES(8);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct SCRIPT_RUNTIME_FEATURES(pub ::std::os::raw::c_int);
#[repr(i32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum SCITER_RT_OPTIONS {
    SCITER_SMOOTH_SCROLL = 1,
    SCITER_CONNECTION_TIMEOUT = 2,
    SCITER_HTTPS_ERROR = 3,
    SCITER_FONT_SMOOTHING = 4,
    SCITER_TRANSPARENT_WINDOW = 6,
    SCITER_SET_GPU_BLACKLIST = 7,
    SCITER_SET_SCRIPT_RUNTIME_FEATURES = 8,
    SCITER_SET_GFX_LAYER = 9,
    SCITER_SET_DEBUG_MODE = 10,
    SCITER_SET_UX_THEMING = 11,
    SCITER_ALPHA_WINDOW = 12,
    SCITER_SET_INIT_SCRIPT = 13,
    SCITER_SET_MAIN_WINDOW = 14,
    SCITER_SET_MAX_HTTP_DATA_LENGTH = 15,
    SCITER_SET_PX_AS_DIP = 16,
    SCITER_ENABLE_UIAUTOMATION = 17,
    SCITER_USE_INTERNAL_HTTP_CLIENT = 18,
    SCITER_EXTENDED_TOUCHPAD_SUPPORT = 19,
    SCITER_ENABLE_DIRECT_COMPOSITION = 20,
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum SCITER_APP_CMD {
    SCITER_APP_STOP = 0,
    SCITER_APP_LOOP = 1,
    SCITER_APP_INIT = 2,
    SCITER_APP_SHUTDOWN = 3,
    SCITER_APP_RUN = 4,
}
pub type SciterPrimordialLoader = ::std::option::Option<
    unsafe extern "C" fn(url: *const WCHAR, out_pb: *mut LPCBYTE, out_cb: *mut UINT) -> SBOOL,
>;
#[repr(i32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum SCITER_WINDOW_CMD {
    SCITER_WINDOW_SET_STATE = 1,
    SCITER_WINDOW_GET_STATE = 2,
    SCITER_WINDOW_ACTIVATE = 3,
    SCITER_WINDOW_SET_PLACEMENT = 4,
    SCITER_WINDOW_GET_PLACEMENT = 5,
    SCITER_WINDOW_GET_VULKAN_ENVIRONMENT = 20,
    SCITER_WINDOW_GET_VULKAN_CONTEXT = 21,
    SCITER_WINDOW_SET_VULKAN_BRIDGE = 22,
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum SCITER_WINDOW_STATE {
    SCITER_WINDOW_STATE_CLOSED = 0,
    SCITER_WINDOW_STATE_SHOWN = 1,
    SCITER_WINDOW_STATE_MINIMIZED = 2,
    SCITER_WINDOW_STATE_MAXIMIZED = 3,
    SCITER_WINDOW_STATE_HIDDEN = 4,
    SCITER_WINDOW_STATE_FULL_SCREEN = 5,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct URL_DATA {
    pub requestedUrl: LPCSTR,
    pub realUrl: LPCSTR,
    pub requestedType: SciterResourceType,
    pub httpHeaders: LPCSTR,
    pub mimeType: LPCSTR,
    pub encoding: LPCSTR,
    pub data: LPCBYTE,
    pub dataLength: UINT,
}
impl SCITER_CREATE_WINDOW_FLAGS {
    pub const SW_CHILD: SCITER_CREATE_WINDOW_FLAGS = SCITER_CREATE_WINDOW_FLAGS(1);
}
impl SCITER_CREATE_WINDOW_FLAGS {
    pub const SW_TITLEBAR: SCITER_CREATE_WINDOW_FLAGS = SCITER_CREATE_WINDOW_FLAGS(2);
}
impl SCITER_CREATE_WINDOW_FLAGS {
    pub const SW_RESIZEABLE: SCITER_CREATE_WINDOW_FLAGS = SCITER_CREATE_WINDOW_FLAGS(4);
}
impl SCITER_CREATE_WINDOW_FLAGS {
    pub const SW_TOOL: SCITER_CREATE_WINDOW_FLAGS = SCITER_CREATE_WINDOW_FLAGS(8);
}
impl SCITER_CREATE_WINDOW_FLAGS {
    pub const SW_CONTROLS: SCITER_CREATE_WINDOW_FLAGS = SCITER_CREATE_WINDOW_FLAGS(16);
}
impl SCITER_CREATE_WINDOW_FLAGS {
    pub const SW_GLASSY: SCITER_CREATE_WINDOW_FLAGS = SCITER_CREATE_WINDOW_FLAGS(32);
}
impl SCITER_CREATE_WINDOW_FLAGS {
    pub const SW_ALPHA: SCITER_CREATE_WINDOW_FLAGS = SCITER_CREATE_WINDOW_FLAGS(64);
}
impl SCITER_CREATE_WINDOW_FLAGS {
    pub const SW_MAIN: SCITER_CREATE_WINDOW_FLAGS = SCITER_CREATE_WINDOW_FLAGS(128);
}
impl SCITER_CREATE_WINDOW_FLAGS {
    pub const SW_POPUP: SCITER_CREATE_WINDOW_FLAGS = SCITER_CREATE_WINDOW_FLAGS(256);
}
impl SCITER_CREATE_WINDOW_FLAGS {
    pub const SW_ENABLE_DEBUG: SCITER_CREATE_WINDOW_FLAGS = SCITER_CREATE_WINDOW_FLAGS(512);
}
impl SCITER_CREATE_WINDOW_FLAGS {
    pub const SW_OWNS_VM: SCITER_CREATE_WINDOW_FLAGS = SCITER_CREATE_WINDOW_FLAGS(1024);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct SCITER_CREATE_WINDOW_FLAGS(pub ::std::os::raw::c_int);
impl OUTPUT_SUBSYTEMS {
    pub const OT_DOM: OUTPUT_SUBSYTEMS = OUTPUT_SUBSYTEMS(0);
}
impl OUTPUT_SUBSYTEMS {
    pub const OT_CSSS: OUTPUT_SUBSYTEMS = OUTPUT_SUBSYTEMS(1);
}
impl OUTPUT_SUBSYTEMS {
    pub const OT_CSS: OUTPUT_SUBSYTEMS = OUTPUT_SUBSYTEMS(2);
}
impl OUTPUT_SUBSYTEMS {
    pub const OT_TIS: OUTPUT_SUBSYTEMS = OUTPUT_SUBSYTEMS(3);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct OUTPUT_SUBSYTEMS(pub ::std::os::raw::c_int);
impl OUTPUT_SEVERITY {
    pub const OS_INFO: OUTPUT_SEVERITY = OUTPUT_SEVERITY(0);
}
impl OUTPUT_SEVERITY {
    pub const OS_WARNING: OUTPUT_SEVERITY = OUTPUT_SEVERITY(1);
}
impl OUTPUT_SEVERITY {
    pub const OS_ERROR: OUTPUT_SEVERITY = OUTPUT_SEVERITY(2);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct OUTPUT_SEVERITY(pub ::std::os::raw::c_int);
pub type DEBUG_OUTPUT_PROC = ::std::option::Option<
    unsafe extern "C" fn(
        param: LPVOID,
        subsystem: UINT,
        severity: UINT,
        text: LPCWSTR,
        text_length: UINT,
    ),
>;
#[repr(i32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum SCITER_X_MSG_CODE {
    SXM_CREATE = 0,
    SXM_DESTROY = 1,
    SXM_SIZE = 2,
    SXM_PAINT = 3,
    SXM_RESOLUTION = 4,
    SXM_HEARTBIT = 5,
    SXM_MOUSE = 6,
    SXM_KEY = 7,
    SXM_FOCUS = 8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SCITER_X_MSG {
    pub msg: UINT,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SCITER_X_MSG_CREATE {
    pub header: SCITER_X_MSG,
    pub backend: UINT,
    pub transparent: SBOOL,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SCITER_X_MSG_DESTROY {
    pub header: SCITER_X_MSG,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SCITER_X_MSG_SIZE {
    pub header: SCITER_X_MSG,
    pub width: UINT,
    pub height: UINT,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SCITER_X_MSG_RESOLUTION {
    pub header: SCITER_X_MSG,
    pub pixelsPerInch: UINT,
}
#[repr(C)]
pub struct SCITER_X_MSG_MOUSE {
    pub header: SCITER_X_MSG,
    pub event: MOUSE_EVENTS,
    pub button: MOUSE_BUTTONS,
    pub modifiers: KEYBOARD_STATES,
    pub pos: POINT,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SCITER_X_MSG_KEY {
    pub header: SCITER_X_MSG,
    pub event: KEY_EVENTS,
    pub code: UINT,
    pub modifiers: KEYBOARD_STATES,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SCITER_X_MSG_FOCUS {
    pub header: SCITER_X_MSG,
    pub got: SBOOL,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SCITER_X_MSG_HEARTBIT {
    pub header: SCITER_X_MSG,
    pub time: UINT,
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum SCITER_PAINT_TARGET_TYPE {
    SPT_DEFAULT = 0,
    SPT_RECEIVER = 1,
    SPT_SURFACE = 2,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct SCITER_X_MSG_PAINT {
    pub header: SCITER_X_MSG,
    pub element: HELEMENT,
    pub isFore: SBOOL,
    pub targetType: UINT,
    pub target: SCITER_X_MSG_PAINT__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union SCITER_X_MSG_PAINT__bindgen_ty_1 {
    pub pSurface: LPVOID,
    pub receiver: SCITER_X_MSG_PAINT__bindgen_ty_1__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SCITER_X_MSG_PAINT__bindgen_ty_1__bindgen_ty_1 {
    pub param: *mut ::std::os::raw::c_void,
    pub callback: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: LPCBYTE,
            arg2: INT,
            arg3: INT,
            arg4: UINT,
            arg5: UINT,
            arg6: LPVOID,
        ),
    >,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ISciterAPI {
    pub version: UINT,
    pub SciterClassName: ::std::option::Option<unsafe extern "C" fn() -> LPCWSTR>,
    pub SciterVersion: ::std::option::Option<unsafe extern "C" fn(n: UINT) -> UINT>,
    pub SciterDataReady: ::std::option::Option<
        unsafe extern "C" fn(hwnd: HWND, uri: LPCWSTR, data: LPCBYTE, dataLength: UINT) -> SBOOL,
    >,
    pub SciterDataReadyAsync: ::std::option::Option<
        unsafe extern "C" fn(
            hwnd: HWND,
            uri: LPCWSTR,
            data: LPCBYTE,
            dataLength: UINT,
            requestId: LPVOID,
        ) -> SBOOL,
    >,
    pub SciterProc: ::std::option::Option<
        unsafe extern "C" fn(hwnd: HWND, msg: UINT, wParam: WPARAM, lParam: LPARAM) -> LRESULT,
    >,
    pub SciterProcND: ::std::option::Option<
        unsafe extern "C" fn(
            hwnd: HWND,
            msg: UINT,
            wParam: WPARAM,
            lParam: LPARAM,
            pbHandled: *mut SBOOL,
        ) -> LRESULT,
    >,
    pub SciterLoadFile:
        ::std::option::Option<unsafe extern "C" fn(hWndSciter: HWND, filename: LPCWSTR) -> SBOOL>,
    pub SciterLoadHtml: ::std::option::Option<
        unsafe extern "C" fn(
            hWndSciter: HWND,
            html: LPCBYTE,
            htmlSize: UINT,
            baseUrl: LPCWSTR,
        ) -> SBOOL,
    >,
    pub SciterSetCallback: ::std::option::Option<
        unsafe extern "C" fn(hWndSciter: HWND, cb: LPSciterHostCallback, cbParam: LPVOID),
    >,
    pub SciterSetMasterCSS:
        ::std::option::Option<unsafe extern "C" fn(utf8: LPCBYTE, numBytes: UINT) -> SBOOL>,
    pub SciterAppendMasterCSS:
        ::std::option::Option<unsafe extern "C" fn(utf8: LPCBYTE, numBytes: UINT) -> SBOOL>,
    pub SciterSetCSS: ::std::option::Option<
        unsafe extern "C" fn(
            hWndSciter: HWND,
            utf8: LPCBYTE,
            numBytes: UINT,
            baseUrl: LPCWSTR,
            mediaType: LPCWSTR,
        ) -> SBOOL,
    >,
    pub SciterSetMediaType:
        ::std::option::Option<unsafe extern "C" fn(hWndSciter: HWND, mediaType: LPCWSTR) -> SBOOL>,
    pub SciterSetMediaVars: ::std::option::Option<
        unsafe extern "C" fn(hWndSciter: HWND, mediaVars: *const SCITER_VALUE) -> SBOOL,
    >,
    pub SciterGetMinWidth: ::std::option::Option<unsafe extern "C" fn(hWndSciter: HWND) -> UINT>,
    pub SciterGetMinHeight:
        ::std::option::Option<unsafe extern "C" fn(hWndSciter: HWND, width: UINT) -> UINT>,
    pub SciterCall: ::std::option::Option<
        unsafe extern "C" fn(
            hWnd: HWND,
            functionName: LPCSTR,
            argc: UINT,
            argv: *const SCITER_VALUE,
            retval: *mut SCITER_VALUE,
        ) -> SBOOL,
    >,
    pub SciterEval: ::std::option::Option<
        unsafe extern "C" fn(
            hwnd: HWND,
            script: LPCWSTR,
            scriptLength: UINT,
            pretval: *mut SCITER_VALUE,
        ) -> SBOOL,
    >,
    pub SciterUpdateWindow: ::std::option::Option<unsafe extern "C" fn(hwnd: HWND)>,
    pub SciterTranslateMessage:
        ::std::option::Option<unsafe extern "C" fn(lpMsg: *mut MSG) -> SBOOL>,
    pub SciterSetOption: ::std::option::Option<
        unsafe extern "C" fn(hWnd: HWND, option: UINT, value: UINT_PTR) -> SBOOL,
    >,
    pub SciterGetPPI:
        ::std::option::Option<unsafe extern "C" fn(hWndSciter: HWND, px: *mut UINT, py: *mut UINT)>,
    pub SciterGetViewExpando:
        ::std::option::Option<unsafe extern "C" fn(hwnd: HWND, pval: *mut VALUE) -> SBOOL>,
    pub SciterRenderD2D:
        ::std::option::Option<unsafe extern "C" fn(hWndSciter: HWND, prt: *mut IUnknown) -> SBOOL>,
    pub SciterD2DFactory:
        ::std::option::Option<unsafe extern "C" fn(ppf: *mut *mut IUnknown) -> SBOOL>,
    pub SciterDWFactory:
        ::std::option::Option<unsafe extern "C" fn(ppf: *mut *mut IUnknown) -> SBOOL>,
    pub SciterGraphicsCaps: ::std::option::Option<unsafe extern "C" fn(pcaps: LPUINT) -> SBOOL>,
    pub SciterSetHomeURL:
        ::std::option::Option<unsafe extern "C" fn(hWndSciter: HWND, baseUrl: LPCWSTR) -> SBOOL>,
    pub SciterCreateNSView: ::std::option::Option<unsafe extern "C" fn(frame: LPRECT) -> HWND>,
    pub SciterCreateWidget: ::std::option::Option<unsafe extern "C" fn(frame: LPRECT) -> HWND>,
    pub SciterCreateWindow: ::std::option::Option<
        unsafe extern "C" fn(
            creationFlags: UINT,
            frame: LPRECT,
            delegate: ::std::option::Option<
                unsafe extern "C" fn(
                    arg1: HWND,
                    arg2: UINT,
                    arg3: WPARAM,
                    arg4: LPARAM,
                    arg5: LPVOID,
                    arg6: *mut SBOOL,
                ) -> LRESULT,
            >,
            delegateParam: LPVOID,
            parent: HWND,
        ) -> HWND,
    >,
    pub SciterSetupDebugOutput: ::std::option::Option<
        unsafe extern "C" fn(hwndOrNull: HWND, param: LPVOID, pfOutput: DEBUG_OUTPUT_PROC),
    >,
    pub Sciter_UseElement: ::std::option::Option<unsafe extern "C" fn(he: HELEMENT) -> INT>,
    pub Sciter_UnuseElement: ::std::option::Option<unsafe extern "C" fn(he: HELEMENT) -> INT>,
    pub SciterGetRootElement:
        ::std::option::Option<unsafe extern "C" fn(hwnd: HWND, phe: *mut HELEMENT) -> INT>,
    pub SciterGetFocusElement:
        ::std::option::Option<unsafe extern "C" fn(hwnd: HWND, phe: *mut HELEMENT) -> INT>,
    pub SciterFindElement: ::std::option::Option<
        unsafe extern "C" fn(hwnd: HWND, pt: POINT, phe: *mut HELEMENT) -> INT,
    >,
    pub SciterGetChildrenCount:
        ::std::option::Option<unsafe extern "C" fn(he: HELEMENT, count: *mut UINT) -> INT>,
    pub SciterGetNthChild: ::std::option::Option<
        unsafe extern "C" fn(he: HELEMENT, n: UINT, phe: *mut HELEMENT) -> INT,
    >,
    pub SciterGetParentElement: ::std::option::Option<
        unsafe extern "C" fn(he: HELEMENT, p_parent_he: *mut HELEMENT) -> INT,
    >,
    pub SciterGetElementHtmlCB: ::std::option::Option<
        unsafe extern "C" fn(
            he: HELEMENT,
            outer: SBOOL,
            rcv: ::std::option::Option<
                unsafe extern "C" fn(arg1: LPCBYTE, arg2: UINT, arg3: LPVOID),
            >,
            rcv_param: LPVOID,
        ) -> INT,
    >,
    pub SciterGetElementTextCB: ::std::option::Option<
        unsafe extern "C" fn(
            he: HELEMENT,
            rcv: ::std::option::Option<
                unsafe extern "C" fn(arg1: LPCWSTR, arg2: UINT, arg3: LPVOID),
            >,
            rcv_param: LPVOID,
        ) -> INT,
    >,
    pub SciterSetElementText: ::std::option::Option<
        unsafe extern "C" fn(he: HELEMENT, utf16: LPCWSTR, length: UINT) -> INT,
    >,
    pub SciterGetAttributeCount:
        ::std::option::Option<unsafe extern "C" fn(he: HELEMENT, p_count: LPUINT) -> INT>,
    pub SciterGetNthAttributeNameCB: ::std::option::Option<
        unsafe extern "C" fn(
            he: HELEMENT,
            n: UINT,
            rcv: ::std::option::Option<unsafe extern "C" fn(arg1: LPCSTR, arg2: UINT, arg3: LPVOID)>,
            rcv_param: LPVOID,
        ) -> INT,
    >,
    pub SciterGetNthAttributeValueCB: ::std::option::Option<
        unsafe extern "C" fn(
            he: HELEMENT,
            n: UINT,
            rcv: ::std::option::Option<
                unsafe extern "C" fn(arg1: LPCWSTR, arg2: UINT, arg3: LPVOID),
            >,
            rcv_param: LPVOID,
        ) -> INT,
    >,
    pub SciterGetAttributeByNameCB: ::std::option::Option<
        unsafe extern "C" fn(
            he: HELEMENT,
            name: LPCSTR,
            rcv: ::std::option::Option<
                unsafe extern "C" fn(arg1: LPCWSTR, arg2: UINT, arg3: LPVOID),
            >,
            rcv_param: LPVOID,
        ) -> INT,
    >,
    pub SciterSetAttributeByName: ::std::option::Option<
        unsafe extern "C" fn(he: HELEMENT, name: LPCSTR, value: LPCWSTR) -> INT,
    >,
    pub SciterClearAttributes: ::std::option::Option<unsafe extern "C" fn(he: HELEMENT) -> INT>,
    pub SciterGetElementIndex:
        ::std::option::Option<unsafe extern "C" fn(he: HELEMENT, p_index: LPUINT) -> INT>,
    pub SciterGetElementType:
        ::std::option::Option<unsafe extern "C" fn(he: HELEMENT, p_type: *mut LPCSTR) -> INT>,
    pub SciterGetElementTypeCB: ::std::option::Option<
        unsafe extern "C" fn(
            he: HELEMENT,
            rcv: ::std::option::Option<unsafe extern "C" fn(arg1: LPCSTR, arg2: UINT, arg3: LPVOID)>,
            rcv_param: LPVOID,
        ) -> INT,
    >,
    pub SciterGetStyleAttributeCB: ::std::option::Option<
        unsafe extern "C" fn(
            he: HELEMENT,
            name: LPCSTR,
            rcv: ::std::option::Option<
                unsafe extern "C" fn(arg1: LPCWSTR, arg2: UINT, arg3: LPVOID),
            >,
            rcv_param: LPVOID,
        ) -> INT,
    >,
    pub SciterSetStyleAttribute: ::std::option::Option<
        unsafe extern "C" fn(he: HELEMENT, name: LPCSTR, value: LPCWSTR) -> INT,
    >,
    pub SciterGetElementLocation: ::std::option::Option<
        unsafe extern "C" fn(he: HELEMENT, p_location: LPRECT, areas: UINT) -> INT,
    >,
    pub SciterScrollToView:
        ::std::option::Option<unsafe extern "C" fn(he: HELEMENT, SciterScrollFlags: UINT) -> INT>,
    pub SciterUpdateElement:
        ::std::option::Option<unsafe extern "C" fn(he: HELEMENT, andForceRender: SBOOL) -> INT>,
    pub SciterRefreshElementArea:
        ::std::option::Option<unsafe extern "C" fn(he: HELEMENT, rc: RECT) -> INT>,
    pub SciterSetCapture: ::std::option::Option<unsafe extern "C" fn(he: HELEMENT) -> INT>,
    pub SciterReleaseCapture: ::std::option::Option<unsafe extern "C" fn(he: HELEMENT) -> INT>,
    pub SciterGetElementHwnd: ::std::option::Option<
        unsafe extern "C" fn(he: HELEMENT, p_hwnd: *mut HWND, rootWindow: SBOOL) -> INT,
    >,
    pub SciterCombineURL: ::std::option::Option<
        unsafe extern "C" fn(he: HELEMENT, szUrlBuffer: LPWSTR, UrlBufferSize: UINT) -> INT,
    >,
    pub SciterSelectElements: ::std::option::Option<
        unsafe extern "C" fn(
            he: HELEMENT,
            CSS_selectors: LPCSTR,
            callback: ::std::option::Option<
                unsafe extern "C" fn(arg1: HELEMENT, arg2: LPVOID) -> SBOOL,
            >,
            param: LPVOID,
        ) -> INT,
    >,
    pub SciterSelectElementsW: ::std::option::Option<
        unsafe extern "C" fn(
            he: HELEMENT,
            CSS_selectors: LPCWSTR,
            callback: ::std::option::Option<
                unsafe extern "C" fn(arg1: HELEMENT, arg2: LPVOID) -> SBOOL,
            >,
            param: LPVOID,
        ) -> INT,
    >,
    pub SciterSelectParent: ::std::option::Option<
        unsafe extern "C" fn(
            he: HELEMENT,
            selector: LPCSTR,
            depth: UINT,
            heFound: *mut HELEMENT,
        ) -> INT,
    >,
    pub SciterSelectParentW: ::std::option::Option<
        unsafe extern "C" fn(
            he: HELEMENT,
            selector: LPCWSTR,
            depth: UINT,
            heFound: *mut HELEMENT,
        ) -> INT,
    >,
    pub SciterSetElementHtml: ::std::option::Option<
        unsafe extern "C" fn(
            he: HELEMENT,
            html: *const BYTE,
            htmlLength: UINT,
            where_: UINT,
        ) -> INT,
    >,
    pub SciterGetElementUID:
        ::std::option::Option<unsafe extern "C" fn(he: HELEMENT, puid: *mut UINT) -> INT>,
    pub SciterGetElementByUID: ::std::option::Option<
        unsafe extern "C" fn(hwnd: HWND, uid: UINT, phe: *mut HELEMENT) -> INT,
    >,
    pub SciterShowPopup: ::std::option::Option<
        unsafe extern "C" fn(hePopup: HELEMENT, heAnchor: HELEMENT, placement: UINT) -> INT,
    >,
    pub SciterShowPopupAt: ::std::option::Option<
        unsafe extern "C" fn(hePopup: HELEMENT, pos: POINT, placement: UINT) -> INT,
    >,
    pub SciterHidePopup: ::std::option::Option<unsafe extern "C" fn(he: HELEMENT) -> INT>,
    pub SciterGetElementState:
        ::std::option::Option<unsafe extern "C" fn(he: HELEMENT, pstateBits: *mut UINT) -> INT>,
    pub SciterSetElementState: ::std::option::Option<
        unsafe extern "C" fn(
            he: HELEMENT,
            stateBitsToSet: UINT,
            stateBitsToClear: UINT,
            updateView: SBOOL,
        ) -> INT,
    >,
    pub SciterCreateElement: ::std::option::Option<
        unsafe extern "C" fn(tagname: LPCSTR, textOrNull: LPCWSTR, phe: *mut HELEMENT) -> INT,
    >,
    pub SciterCloneElement:
        ::std::option::Option<unsafe extern "C" fn(he: HELEMENT, phe: *mut HELEMENT) -> INT>,
    pub SciterInsertElement: ::std::option::Option<
        unsafe extern "C" fn(he: HELEMENT, hparent: HELEMENT, index: UINT) -> INT,
    >,
    pub SciterDetachElement: ::std::option::Option<unsafe extern "C" fn(he: HELEMENT) -> INT>,
    pub SciterDeleteElement: ::std::option::Option<unsafe extern "C" fn(he: HELEMENT) -> INT>,
    pub SciterSetTimer: ::std::option::Option<
        unsafe extern "C" fn(he: HELEMENT, milliseconds: UINT, timer_id: UINT_PTR) -> INT,
    >,
    pub SciterDetachEventHandler: ::std::option::Option<
        unsafe extern "C" fn(he: HELEMENT, pep: LPELEMENT_EVENT_PROC, tag: LPVOID) -> INT,
    >,
    pub SciterAttachEventHandler: ::std::option::Option<
        unsafe extern "C" fn(he: HELEMENT, pep: LPELEMENT_EVENT_PROC, tag: LPVOID) -> INT,
    >,
    pub SciterWindowAttachEventHandler: ::std::option::Option<
        unsafe extern "C" fn(
            hwndLayout: HWND,
            pep: LPELEMENT_EVENT_PROC,
            tag: LPVOID,
            subscription: UINT,
        ) -> INT,
    >,
    pub SciterWindowDetachEventHandler: ::std::option::Option<
        unsafe extern "C" fn(hwndLayout: HWND, pep: LPELEMENT_EVENT_PROC, tag: LPVOID) -> INT,
    >,
    pub SciterSendEvent: ::std::option::Option<
        unsafe extern "C" fn(
            he: HELEMENT,
            appEventCode: UINT,
            heSource: HELEMENT,
            reason: UINT_PTR,
            handled: *mut SBOOL,
        ) -> INT,
    >,
    pub SciterPostEvent: ::std::option::Option<
        unsafe extern "C" fn(
            he: HELEMENT,
            appEventCode: UINT,
            heSource: HELEMENT,
            reason: UINT_PTR,
        ) -> INT,
    >,
    pub SciterCallBehaviorMethod: ::std::option::Option<
        unsafe extern "C" fn(he: HELEMENT, params: *mut METHOD_PARAMS) -> INT,
    >,
    pub SciterRequestElementData: ::std::option::Option<
        unsafe extern "C" fn(
            he: HELEMENT,
            url: LPCWSTR,
            dataType: UINT,
            initiator: HELEMENT,
        ) -> INT,
    >,
    pub SciterHttpRequest: ::std::option::Option<
        unsafe extern "C" fn(
            he: HELEMENT,
            url: LPCWSTR,
            dataType: UINT,
            requestType: UINT,
            requestParams: *mut REQUEST_PARAM,
            nParams: UINT,
        ) -> INT,
    >,
    pub SciterGetScrollInfo: ::std::option::Option<
        unsafe extern "C" fn(
            he: HELEMENT,
            scrollPos: LPPOINT,
            viewRect: LPRECT,
            contentSize: LPSIZE,
        ) -> INT,
    >,
    pub SciterSetScrollPos: ::std::option::Option<
        unsafe extern "C" fn(he: HELEMENT, scrollPos: POINT, smooth: SBOOL) -> INT,
    >,
    pub SciterGetElementIntrinsicWidths: ::std::option::Option<
        unsafe extern "C" fn(he: HELEMENT, pMinWidth: *mut INT, pMaxWidth: *mut INT) -> INT,
    >,
    pub SciterGetElementIntrinsicHeight: ::std::option::Option<
        unsafe extern "C" fn(he: HELEMENT, forWidth: INT, pHeight: *mut INT) -> INT,
    >,
    pub SciterIsElementVisible:
        ::std::option::Option<unsafe extern "C" fn(he: HELEMENT, pVisible: *mut SBOOL) -> INT>,
    pub SciterIsElementEnabled:
        ::std::option::Option<unsafe extern "C" fn(he: HELEMENT, pEnabled: *mut SBOOL) -> INT>,
    pub SciterSortElements: ::std::option::Option<
        unsafe extern "C" fn(
            he: HELEMENT,
            firstIndex: UINT,
            lastIndex: UINT,
            cmpFunc: ::std::option::Option<
                unsafe extern "C" fn(arg1: HELEMENT, arg2: HELEMENT, arg3: LPVOID) -> INT,
            >,
            cmpFuncParam: LPVOID,
        ) -> INT,
    >,
    pub SciterSwapElements:
        ::std::option::Option<unsafe extern "C" fn(he1: HELEMENT, he2: HELEMENT) -> INT>,
    pub SciterTraverseUIEvent: ::std::option::Option<
        unsafe extern "C" fn(evt: UINT, eventCtlStruct: LPVOID, bOutProcessed: *mut SBOOL) -> INT,
    >,
    pub SciterCallScriptingMethod: ::std::option::Option<
        unsafe extern "C" fn(
            he: HELEMENT,
            name: LPCSTR,
            argv: *const VALUE,
            argc: UINT,
            retval: *mut VALUE,
        ) -> INT,
    >,
    pub SciterCallScriptingFunction: ::std::option::Option<
        unsafe extern "C" fn(
            he: HELEMENT,
            name: LPCSTR,
            argv: *const VALUE,
            argc: UINT,
            retval: *mut VALUE,
        ) -> INT,
    >,
    pub SciterEvalElementScript: ::std::option::Option<
        unsafe extern "C" fn(
            he: HELEMENT,
            script: LPCWSTR,
            scriptLength: UINT,
            retval: *mut VALUE,
        ) -> INT,
    >,
    pub SciterAttachHwndToElement:
        ::std::option::Option<unsafe extern "C" fn(he: HELEMENT, hwnd: HWND) -> INT>,
    pub SciterControlGetType:
        ::std::option::Option<unsafe extern "C" fn(he: HELEMENT, pType: *mut UINT) -> INT>,
    pub SciterGetValue:
        ::std::option::Option<unsafe extern "C" fn(he: HELEMENT, pval: *mut VALUE) -> INT>,
    pub SciterSetValue:
        ::std::option::Option<unsafe extern "C" fn(he: HELEMENT, pval: *const VALUE) -> INT>,
    pub SciterGetExpando: ::std::option::Option<
        unsafe extern "C" fn(he: HELEMENT, pval: *mut VALUE, forceCreation: SBOOL) -> INT,
    >,
    pub SciterGetObject: ::std::option::Option<
        unsafe extern "C" fn(
            he: HELEMENT,
            pval: *mut ::std::os::raw::c_void,
            forceCreation: SBOOL,
        ) -> INT,
    >,
    pub SciterGetElementNamespace: ::std::option::Option<
        unsafe extern "C" fn(he: HELEMENT, pval: *mut ::std::os::raw::c_void) -> INT,
    >,
    pub SciterGetHighlightedElement:
        ::std::option::Option<unsafe extern "C" fn(hwnd: HWND, phe: *mut HELEMENT) -> INT>,
    pub SciterSetHighlightedElement:
        ::std::option::Option<unsafe extern "C" fn(hwnd: HWND, he: HELEMENT) -> INT>,
    pub SciterNodeAddRef: ::std::option::Option<unsafe extern "C" fn(hn: HNODE) -> INT>,
    pub SciterNodeRelease: ::std::option::Option<unsafe extern "C" fn(hn: HNODE) -> INT>,
    pub SciterNodeCastFromElement:
        ::std::option::Option<unsafe extern "C" fn(he: HELEMENT, phn: *mut HNODE) -> INT>,
    pub SciterNodeCastToElement:
        ::std::option::Option<unsafe extern "C" fn(hn: HNODE, he: *mut HELEMENT) -> INT>,
    pub SciterNodeFirstChild:
        ::std::option::Option<unsafe extern "C" fn(hn: HNODE, phn: *mut HNODE) -> INT>,
    pub SciterNodeLastChild:
        ::std::option::Option<unsafe extern "C" fn(hn: HNODE, phn: *mut HNODE) -> INT>,
    pub SciterNodeNextSibling:
        ::std::option::Option<unsafe extern "C" fn(hn: HNODE, phn: *mut HNODE) -> INT>,
    pub SciterNodePrevSibling:
        ::std::option::Option<unsafe extern "C" fn(hn: HNODE, phn: *mut HNODE) -> INT>,
    pub SciterNodeParent:
        ::std::option::Option<unsafe extern "C" fn(hnode: HNODE, pheParent: *mut HELEMENT) -> INT>,
    pub SciterNodeNthChild:
        ::std::option::Option<unsafe extern "C" fn(hnode: HNODE, n: UINT, phn: *mut HNODE) -> INT>,
    pub SciterNodeChildrenCount:
        ::std::option::Option<unsafe extern "C" fn(hnode: HNODE, pn: *mut UINT) -> INT>,
    pub SciterNodeType:
        ::std::option::Option<unsafe extern "C" fn(hnode: HNODE, pNodeType: *mut UINT) -> INT>,
    pub SciterNodeGetText: ::std::option::Option<
        unsafe extern "C" fn(
            hnode: HNODE,
            rcv: ::std::option::Option<
                unsafe extern "C" fn(arg1: LPCWSTR, arg2: UINT, arg3: LPVOID),
            >,
            rcv_param: LPVOID,
        ) -> INT,
    >,
    pub SciterNodeSetText: ::std::option::Option<
        unsafe extern "C" fn(hnode: HNODE, text: LPCWSTR, textLength: UINT) -> INT,
    >,
    pub SciterNodeInsert:
        ::std::option::Option<unsafe extern "C" fn(hnode: HNODE, where_: UINT, what: HNODE) -> INT>,
    pub SciterNodeRemove:
        ::std::option::Option<unsafe extern "C" fn(hnode: HNODE, finalize: SBOOL) -> INT>,
    pub SciterCreateTextNode: ::std::option::Option<
        unsafe extern "C" fn(text: LPCWSTR, textLength: UINT, phnode: *mut HNODE) -> INT,
    >,
    pub SciterCreateCommentNode: ::std::option::Option<
        unsafe extern "C" fn(text: LPCWSTR, textLength: UINT, phnode: *mut HNODE) -> INT,
    >,
    pub ValueInit: ::std::option::Option<unsafe extern "C" fn(pval: *mut VALUE) -> UINT>,
    pub ValueClear: ::std::option::Option<unsafe extern "C" fn(pval: *mut VALUE) -> UINT>,
    pub ValueCompare: ::std::option::Option<
        unsafe extern "C" fn(pval1: *const VALUE, pval2: *const VALUE) -> UINT,
    >,
    pub ValueCopy:
        ::std::option::Option<unsafe extern "C" fn(pdst: *mut VALUE, psrc: *const VALUE) -> UINT>,
    pub ValueIsolate: ::std::option::Option<unsafe extern "C" fn(pdst: *mut VALUE) -> UINT>,
    pub ValueType: ::std::option::Option<
        unsafe extern "C" fn(pval: *const VALUE, pType: *mut UINT, pUnits: *mut UINT) -> UINT,
    >,
    pub ValueStringData: ::std::option::Option<
        unsafe extern "C" fn(
            pval: *const VALUE,
            pChars: *mut LPCWSTR,
            pNumChars: *mut UINT,
        ) -> UINT,
    >,
    pub ValueStringDataSet: ::std::option::Option<
        unsafe extern "C" fn(pval: *mut VALUE, chars: LPCWSTR, numChars: UINT, units: UINT) -> UINT,
    >,
    pub ValueIntData:
        ::std::option::Option<unsafe extern "C" fn(pval: *const VALUE, pData: *mut INT) -> UINT>,
    pub ValueIntDataSet: ::std::option::Option<
        unsafe extern "C" fn(pval: *mut VALUE, data: INT, type_: UINT, units: UINT) -> UINT,
    >,
    pub ValueInt64Data:
        ::std::option::Option<unsafe extern "C" fn(pval: *const VALUE, pData: *mut INT64) -> UINT>,
    pub ValueInt64DataSet: ::std::option::Option<
        unsafe extern "C" fn(pval: *mut VALUE, data: INT64, type_: UINT, units: UINT) -> UINT,
    >,
    pub ValueFloatData:
        ::std::option::Option<unsafe extern "C" fn(pval: *const VALUE, pData: *mut f64) -> UINT>,
    pub ValueFloatDataSet: ::std::option::Option<
        unsafe extern "C" fn(pval: *mut VALUE, data: f64, type_: UINT, units: UINT) -> UINT,
    >,
    pub ValueBinaryData: ::std::option::Option<
        unsafe extern "C" fn(pval: *const VALUE, pBytes: *mut LPCBYTE, pnBytes: *mut UINT) -> UINT,
    >,
    pub ValueBinaryDataSet: ::std::option::Option<
        unsafe extern "C" fn(
            pval: *mut VALUE,
            pBytes: LPCBYTE,
            nBytes: UINT,
            type_: UINT,
            units: UINT,
        ) -> UINT,
    >,
    pub ValueElementsCount:
        ::std::option::Option<unsafe extern "C" fn(pval: *const VALUE, pn: *mut INT) -> UINT>,
    pub ValueNthElementValue: ::std::option::Option<
        unsafe extern "C" fn(pval: *const VALUE, n: INT, pretval: *mut VALUE) -> UINT,
    >,
    pub ValueNthElementValueSet: ::std::option::Option<
        unsafe extern "C" fn(pval: *mut VALUE, n: INT, pval_to_set: *const VALUE) -> UINT,
    >,
    pub ValueNthElementKey: ::std::option::Option<
        unsafe extern "C" fn(pval: *const VALUE, n: INT, pretval: *mut VALUE) -> UINT,
    >,
    pub ValueEnumElements: ::std::option::Option<
        unsafe extern "C" fn(
            pval: *const VALUE,
            penum: ::std::option::Option<
                unsafe extern "C" fn(arg1: LPVOID, arg2: *const VALUE, arg3: *const VALUE) -> SBOOL,
            >,
            param: LPVOID,
        ) -> UINT,
    >,
    pub ValueSetValueToKey: ::std::option::Option<
        unsafe extern "C" fn(
            pval: *mut VALUE,
            pkey: *const VALUE,
            pval_to_set: *const VALUE,
        ) -> UINT,
    >,
    pub ValueGetValueOfKey: ::std::option::Option<
        unsafe extern "C" fn(pval: *const VALUE, pkey: *const VALUE, pretval: *mut VALUE) -> UINT,
    >,
    pub ValueToString:
        ::std::option::Option<unsafe extern "C" fn(pval: *mut VALUE, how: UINT) -> UINT>,
    pub ValueFromString: ::std::option::Option<
        unsafe extern "C" fn(pval: *mut VALUE, str_: LPCWSTR, strLength: UINT, how: UINT) -> UINT,
    >,
    pub ValueInvoke: ::std::option::Option<
        unsafe extern "C" fn(
            pval: *const VALUE,
            pthis: *mut VALUE,
            argc: UINT,
            argv: *const VALUE,
            pretval: *mut VALUE,
            url: LPCWSTR,
        ) -> UINT,
    >,
    pub ValueNativeFunctorSet: ::std::option::Option<
        unsafe extern "C" fn(
            pval: *mut VALUE,
            pinvoke: NATIVE_FUNCTOR_INVOKE,
            prelease: NATIVE_FUNCTOR_RELEASE,
            tag: *mut ::std::os::raw::c_void,
        ) -> UINT,
    >,
    pub ValueIsNativeFunctor:
        ::std::option::Option<unsafe extern "C" fn(pval: *const VALUE) -> SBOOL>,
    pub reserved1: LPVOID,
    pub reserved2: LPVOID,
    pub reserved3: LPVOID,
    pub reserved4: LPVOID,
    pub SciterOpenArchive: ::std::option::Option<
        unsafe extern "C" fn(archiveData: LPCBYTE, archiveDataLength: UINT) -> HSARCHIVE,
    >,
    pub SciterGetArchiveItem: ::std::option::Option<
        unsafe extern "C" fn(
            harc: HSARCHIVE,
            path: LPCWSTR,
            pdata: *mut LPCBYTE,
            pdataLength: *mut UINT,
        ) -> SBOOL,
    >,
    pub SciterCloseArchive: ::std::option::Option<unsafe extern "C" fn(harc: HSARCHIVE) -> SBOOL>,
    pub SciterFireEvent: ::std::option::Option<
        unsafe extern "C" fn(
            evt: *const BEHAVIOR_EVENT_PARAMS,
            post: SBOOL,
            handled: *mut SBOOL,
        ) -> INT,
    >,
    pub SciterGetCallbackParam: ::std::option::Option<unsafe extern "C" fn(hwnd: HWND) -> LPVOID>,
    pub SciterPostCallback: ::std::option::Option<
        unsafe extern "C" fn(
            hwnd: HWND,
            wparam: UINT_PTR,
            lparam: UINT_PTR,
            timeoutms: UINT,
        ) -> UINT_PTR,
    >,
    pub GetSciterGraphicsAPI: ::std::option::Option<unsafe extern "C" fn() -> LPSciterGraphicsAPI>,
    pub GetSciterRequestAPI: ::std::option::Option<unsafe extern "C" fn() -> LPSciterRequestAPI>,
    pub SciterCreateOnDirectXWindow:
        ::std::option::Option<unsafe extern "C" fn(hwnd: HWND, pSwapChain: *mut IUnknown) -> SBOOL>,
    pub SciterRenderOnDirectXWindow: ::std::option::Option<
        unsafe extern "C" fn(
            hwnd: HWND,
            elementToRenderOrNull: HELEMENT,
            frontLayer: SBOOL,
        ) -> SBOOL,
    >,
    pub SciterRenderOnDirectXTexture: ::std::option::Option<
        unsafe extern "C" fn(
            hwnd: HWND,
            elementToRenderOrNull: HELEMENT,
            surface: *mut IUnknown,
        ) -> SBOOL,
    >,
    pub SciterProcX:
        ::std::option::Option<unsafe extern "C" fn(hwnd: HWND, pMsg: *mut SCITER_X_MSG) -> SBOOL>,
    pub SciterAtomValue:
        ::std::option::Option<unsafe extern "C" fn(name: *const ::std::os::raw::c_char) -> UINT64>,
    pub SciterAtomNameCB: ::std::option::Option<
        unsafe extern "C" fn(
            atomv: UINT64,
            rcv: ::std::option::Option<unsafe extern "C" fn(arg1: LPCSTR, arg2: UINT, arg3: LPVOID)>,
            rcv_param: LPVOID,
        ) -> SBOOL,
    >,
    pub SciterSetGlobalAsset:
        ::std::option::Option<unsafe extern "C" fn(pass: *mut som_asset_t) -> SBOOL>,
    pub SciterGetElementAsset: ::std::option::Option<
        unsafe extern "C" fn(el: HELEMENT, nameAtom: UINT64, ppass: *mut *mut som_asset_t) -> INT,
    >,
    pub SciterSetVariable: ::std::option::Option<
        unsafe extern "C" fn(hwndOrNull: HWND, name: LPCSTR, pvalToSet: *const VALUE) -> UINT,
    >,
    pub SciterGetVariable: ::std::option::Option<
        unsafe extern "C" fn(hwndOrNull: HWND, name: LPCSTR, pvalToGet: *mut VALUE) -> UINT,
    >,
    pub SciterElementUnwrap: ::std::option::Option<
        unsafe extern "C" fn(pval: *const VALUE, ppElement: *mut HELEMENT) -> UINT,
    >,
    pub SciterElementWrap:
        ::std::option::Option<unsafe extern "C" fn(pval: *mut VALUE, pElement: HELEMENT) -> UINT>,
    pub SciterNodeUnwrap:
        ::std::option::Option<unsafe extern "C" fn(pval: *const VALUE, ppNode: *mut HNODE) -> UINT>,
    pub SciterNodeWrap:
        ::std::option::Option<unsafe extern "C" fn(pval: *mut VALUE, pNode: HNODE) -> UINT>,
    pub SciterReleaseGlobalAsset:
        ::std::option::Option<unsafe extern "C" fn(pass: *mut som_asset_t) -> SBOOL>,
    pub SciterExec: ::std::option::Option<
        unsafe extern "C" fn(appCmd: UINT, p1: UINT_PTR, p2: UINT_PTR) -> INT_PTR,
    >,
    pub SciterWindowExec: ::std::option::Option<
        unsafe extern "C" fn(hwnd: HWND, windowCmd: UINT, p1: UINT_PTR, p2: UINT_PTR) -> INT_PTR,
    >,
}
pub type ISciterAPI = _ISciterAPI;
pub type SciterAPI_ptr = ::std::option::Option<unsafe extern "C" fn() -> *mut ISciterAPI>;
